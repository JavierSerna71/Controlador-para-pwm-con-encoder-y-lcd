
PANTALLA_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003778  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800390c  0800390c  0000490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  0000502c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003954  08003954  00004954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800395c  0800395c  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003960  08003960  00004960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08003964  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000002c  08003990  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003990  000051a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb6e  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da4  00000000  00000000  00010bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00012970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000964  00000000  00000000  00013598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018093  00000000  00000000  00013efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dce0  00000000  00000000  0002bf8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c838  00000000  00000000  00039c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d64a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ac  00000000  00000000  000d64ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d9798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080038f4 	.word	0x080038f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	080038f4 	.word	0x080038f4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f8:	f000 b988 	b.w	800050c <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	468e      	mov	lr, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d962      	bls.n	80002f0 <__udivmoddi4+0xdc>
 800022a:	fab2 f682 	clz	r6, r2
 800022e:	b14e      	cbz	r6, 8000244 <__udivmoddi4+0x30>
 8000230:	f1c6 0320 	rsb	r3, r6, #32
 8000234:	fa01 f806 	lsl.w	r8, r1, r6
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	40b7      	lsls	r7, r6
 800023e:	ea43 0808 	orr.w	r8, r3, r8
 8000242:	40b4      	lsls	r4, r6
 8000244:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000248:	fa1f fc87 	uxth.w	ip, r7
 800024c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000250:	0c23      	lsrs	r3, r4, #16
 8000252:	fb0e 8811 	mls	r8, lr, r1, r8
 8000256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025a:	fb01 f20c 	mul.w	r2, r1, ip
 800025e:	429a      	cmp	r2, r3
 8000260:	d909      	bls.n	8000276 <__udivmoddi4+0x62>
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000268:	f080 80ea 	bcs.w	8000440 <__udivmoddi4+0x22c>
 800026c:	429a      	cmp	r2, r3
 800026e:	f240 80e7 	bls.w	8000440 <__udivmoddi4+0x22c>
 8000272:	3902      	subs	r1, #2
 8000274:	443b      	add	r3, r7
 8000276:	1a9a      	subs	r2, r3, r2
 8000278:	b2a3      	uxth	r3, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000286:	fb00 fc0c 	mul.w	ip, r0, ip
 800028a:	459c      	cmp	ip, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x8e>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000294:	f080 80d6 	bcs.w	8000444 <__udivmoddi4+0x230>
 8000298:	459c      	cmp	ip, r3
 800029a:	f240 80d3 	bls.w	8000444 <__udivmoddi4+0x230>
 800029e:	443b      	add	r3, r7
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a6:	eba3 030c 	sub.w	r3, r3, ip
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40f3      	lsrs	r3, r6
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xb6>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb0>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x14c>
 80002d2:	4573      	cmp	r3, lr
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xc8>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 8105 	bhi.w	80004e6 <__udivmoddi4+0x2d2>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4690      	mov	r8, r2
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e5      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002ea:	e9c5 4800 	strd	r4, r8, [r5]
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f000 8090 	beq.w	8000416 <__udivmoddi4+0x202>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f040 80a4 	bne.w	8000448 <__udivmoddi4+0x234>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	b280      	uxth	r0, r0
 800030a:	b2bc      	uxth	r4, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000312:	fb0e 221c 	mls	r2, lr, ip, r2
 8000316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031a:	fb04 f20c 	mul.w	r2, r4, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x11e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x11c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80e0 	bhi.w	80004f0 <__udivmoddi4+0x2dc>
 8000330:	46c4      	mov	ip, r8
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	fbb3 f2fe 	udiv	r2, r3, lr
 8000338:	fb0e 3312 	mls	r3, lr, r2, r3
 800033c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000340:	fb02 f404 	mul.w	r4, r2, r4
 8000344:	429c      	cmp	r4, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x144>
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x142>
 8000350:	429c      	cmp	r4, r3
 8000352:	f200 80ca 	bhi.w	80004ea <__udivmoddi4+0x2d6>
 8000356:	4602      	mov	r2, r0
 8000358:	1b1b      	subs	r3, r3, r4
 800035a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x98>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa0e f401 	lsl.w	r4, lr, r1
 8000370:	fa20 f306 	lsr.w	r3, r0, r6
 8000374:	fa2e fe06 	lsr.w	lr, lr, r6
 8000378:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	fa1f fc87 	uxth.w	ip, r7
 8000386:	fbbe f0f9 	udiv	r0, lr, r9
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000390:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000394:	fb00 fe0c 	mul.w	lr, r0, ip
 8000398:	45a6      	cmp	lr, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1a0>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 809c 	bcs.w	80004e2 <__udivmoddi4+0x2ce>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8099 	bls.w	80004e2 <__udivmoddi4+0x2ce>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	fa1f fe83 	uxth.w	lr, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1ce>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d6:	f080 8082 	bcs.w	80004de <__udivmoddi4+0x2ca>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d97f      	bls.n	80004de <__udivmoddi4+0x2ca>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ee:	4564      	cmp	r4, ip
 80003f0:	4673      	mov	r3, lr
 80003f2:	46e1      	mov	r9, ip
 80003f4:	d362      	bcc.n	80004bc <__udivmoddi4+0x2a8>
 80003f6:	d05f      	beq.n	80004b8 <__udivmoddi4+0x2a4>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x1fe>
 80003fa:	ebb8 0203 	subs.w	r2, r8, r3
 80003fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	fa22 f301 	lsr.w	r3, r2, r1
 800040a:	431e      	orrs	r6, r3
 800040c:	40cc      	lsrs	r4, r1
 800040e:	e9c5 6400 	strd	r6, r4, [r5]
 8000412:	2100      	movs	r1, #0
 8000414:	e74f      	b.n	80002b6 <__udivmoddi4+0xa2>
 8000416:	fbb1 fcf2 	udiv	ip, r1, r2
 800041a:	0c01      	lsrs	r1, r0, #16
 800041c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000426:	463b      	mov	r3, r7
 8000428:	4638      	mov	r0, r7
 800042a:	463c      	mov	r4, r7
 800042c:	46b8      	mov	r8, r7
 800042e:	46be      	mov	lr, r7
 8000430:	2620      	movs	r6, #32
 8000432:	fbb1 f1f7 	udiv	r1, r1, r7
 8000436:	eba2 0208 	sub.w	r2, r2, r8
 800043a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043e:	e766      	b.n	800030e <__udivmoddi4+0xfa>
 8000440:	4601      	mov	r1, r0
 8000442:	e718      	b.n	8000276 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e72c      	b.n	80002a2 <__udivmoddi4+0x8e>
 8000448:	f1c6 0220 	rsb	r2, r6, #32
 800044c:	fa2e f302 	lsr.w	r3, lr, r2
 8000450:	40b7      	lsls	r7, r6
 8000452:	40b1      	lsls	r1, r6
 8000454:	fa20 f202 	lsr.w	r2, r0, r2
 8000458:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045c:	430a      	orrs	r2, r1
 800045e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000462:	b2bc      	uxth	r4, r7
 8000464:	fb0e 3318 	mls	r3, lr, r8, r3
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb08 f904 	mul.w	r9, r8, r4
 8000472:	40b0      	lsls	r0, r6
 8000474:	4589      	cmp	r9, r1
 8000476:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047a:	b280      	uxth	r0, r0
 800047c:	d93e      	bls.n	80004fc <__udivmoddi4+0x2e8>
 800047e:	1879      	adds	r1, r7, r1
 8000480:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x276>
 8000486:	4589      	cmp	r9, r1
 8000488:	d81f      	bhi.n	80004ca <__udivmoddi4+0x2b6>
 800048a:	eba1 0109 	sub.w	r1, r1, r9
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fb09 f804 	mul.w	r8, r9, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	b292      	uxth	r2, r2
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d229      	bcs.n	80004f8 <__udivmoddi4+0x2e4>
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004aa:	d2c4      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d2c2      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004b0:	f1a9 0102 	sub.w	r1, r9, #2
 80004b4:	443a      	add	r2, r7
 80004b6:	e7be      	b.n	8000436 <__udivmoddi4+0x222>
 80004b8:	45f0      	cmp	r8, lr
 80004ba:	d29d      	bcs.n	80003f8 <__udivmoddi4+0x1e4>
 80004bc:	ebbe 0302 	subs.w	r3, lr, r2
 80004c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c4:	3801      	subs	r0, #1
 80004c6:	46e1      	mov	r9, ip
 80004c8:	e796      	b.n	80003f8 <__udivmoddi4+0x1e4>
 80004ca:	eba7 0909 	sub.w	r9, r7, r9
 80004ce:	4449      	add	r1, r9
 80004d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	e7db      	b.n	8000496 <__udivmoddi4+0x282>
 80004de:	4673      	mov	r3, lr
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1ce>
 80004e2:	4650      	mov	r0, sl
 80004e4:	e766      	b.n	80003b4 <__udivmoddi4+0x1a0>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e6fd      	b.n	80002e6 <__udivmoddi4+0xd2>
 80004ea:	443b      	add	r3, r7
 80004ec:	3a02      	subs	r2, #2
 80004ee:	e733      	b.n	8000358 <__udivmoddi4+0x144>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	443b      	add	r3, r7
 80004f6:	e71c      	b.n	8000332 <__udivmoddi4+0x11e>
 80004f8:	4649      	mov	r1, r9
 80004fa:	e79c      	b.n	8000436 <__udivmoddi4+0x222>
 80004fc:	eba1 0109 	sub.w	r1, r1, r9
 8000500:	46c4      	mov	ip, r8
 8000502:	fbb1 f9fe 	udiv	r9, r1, lr
 8000506:	fb09 f804 	mul.w	r8, r9, r4
 800050a:	e7c4      	b.n	8000496 <__udivmoddi4+0x282>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	@ 0x28
 8000514:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f001 f919 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f927 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fba7 	bl	8000c70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000522:	f000 f991 	bl	8000848 <MX_ADC1_Init>
  MX_RTC_Init();
 8000526:	f000 f9e1 	bl	80008ec <MX_RTC_Init>
  MX_TIM1_Init();
 800052a:	f000 fa05 	bl	8000938 <MX_TIM1_Init>
  MX_TIM2_Init();
 800052e:	f000 faab 	bl	8000a88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000532:	f000 fb23 	bl	8000b7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	LCD_Structura LCD = LCD_Create(LCD_Port, LCD_Pin, RS_Port, RS_Pin, EN_Port, EN_Pin);
 8000536:	4638      	mov	r0, r7
 8000538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800053c:	9302      	str	r3, [sp, #8]
 800053e:	4b7b      	ldr	r3, [pc, #492]	@ (800072c <main+0x21c>)
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	4b78      	ldr	r3, [pc, #480]	@ (800072c <main+0x21c>)
 800054a:	4a79      	ldr	r2, [pc, #484]	@ (8000730 <main+0x220>)
 800054c:	4979      	ldr	r1, [pc, #484]	@ (8000734 <main+0x224>)
 800054e:	f000 fedc 	bl	800130a <LCD_Create>
	pintarplantilla(&LCD);
 8000552:	463b      	mov	r3, r7
 8000554:	4618      	mov	r0, r3
 8000556:	f001 f8d3 	bl	8001700 <pintarplantilla>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800055a:	2100      	movs	r1, #0
 800055c:	4876      	ldr	r0, [pc, #472]	@ (8000738 <main+0x228>)
 800055e:	f002 fd33 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000562:	2104      	movs	r1, #4
 8000564:	4874      	ldr	r0, [pc, #464]	@ (8000738 <main+0x228>)
 8000566:	f002 fd2f 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800056a:	2108      	movs	r1, #8
 800056c:	4872      	ldr	r0, [pc, #456]	@ (8000738 <main+0x228>)
 800056e:	f002 fd2b 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000572:	210c      	movs	r1, #12
 8000574:	4870      	ldr	r0, [pc, #448]	@ (8000738 <main+0x228>)
 8000576:	f002 fd27 	bl	8002fc8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800057a:	2100      	movs	r1, #0
 800057c:	486f      	ldr	r0, [pc, #444]	@ (800073c <main+0x22c>)
 800057e:	f002 fd23 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000582:	2104      	movs	r1, #4
 8000584:	486d      	ldr	r0, [pc, #436]	@ (800073c <main+0x22c>)
 8000586:	f002 fd1f 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800058a:	2108      	movs	r1, #8
 800058c:	486b      	ldr	r0, [pc, #428]	@ (800073c <main+0x22c>)
 800058e:	f002 fd1b 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000592:	210c      	movs	r1, #12
 8000594:	4869      	ldr	r0, [pc, #420]	@ (800073c <main+0x22c>)
 8000596:	f002 fd17 	bl	8002fc8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	4868      	ldr	r0, [pc, #416]	@ (8000740 <main+0x230>)
 800059e:	f002 fd13 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005a2:	2104      	movs	r1, #4
 80005a4:	4866      	ldr	r0, [pc, #408]	@ (8000740 <main+0x230>)
 80005a6:	f002 fd0f 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005aa:	2108      	movs	r1, #8
 80005ac:	4864      	ldr	r0, [pc, #400]	@ (8000740 <main+0x230>)
 80005ae:	f002 fd0b 	bl	8002fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80005b2:	210c      	movs	r1, #12
 80005b4:	4862      	ldr	r0, [pc, #392]	@ (8000740 <main+0x230>)
 80005b6:	f002 fd07 	bl	8002fc8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1){
	    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == 0) {
 80005ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005be:	485b      	ldr	r0, [pc, #364]	@ (800072c <main+0x21c>)
 80005c0:	f001 fe52 	bl	8002268 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10c      	bne.n	80005e4 <main+0xd4>
	        HAL_Delay(200);
 80005ca:	20c8      	movs	r0, #200	@ 0xc8
 80005cc:	f001 f930 	bl	8001830 <HAL_Delay>
	        cambio = !cambio;
 80005d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000744 <main+0x234>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf0c      	ite	eq
 80005d8:	2301      	moveq	r3, #1
 80005da:	2300      	movne	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	4b58      	ldr	r3, [pc, #352]	@ (8000744 <main+0x234>)
 80005e2:	601a      	str	r2, [r3, #0]
	    }

		periodo=(417*500)/frecuencia;
 80005e4:	4b58      	ldr	r3, [pc, #352]	@ (8000748 <main+0x238>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a58      	ldr	r2, [pc, #352]	@ (800074c <main+0x23c>)
 80005ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ee:	4a58      	ldr	r2, [pc, #352]	@ (8000750 <main+0x240>)
 80005f0:	6013      	str	r3, [r2, #0]

		htim1.Instance->PSC=periodo;
 80005f2:	4b57      	ldr	r3, [pc, #348]	@ (8000750 <main+0x240>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b50      	ldr	r3, [pc, #320]	@ (8000738 <main+0x228>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	629a      	str	r2, [r3, #40]	@ 0x28
		htim1.Instance->CCR1=dutty;
 80005fc:	4b55      	ldr	r3, [pc, #340]	@ (8000754 <main+0x244>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b4d      	ldr	r3, [pc, #308]	@ (8000738 <main+0x228>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2=dutty;
 8000606:	4b53      	ldr	r3, [pc, #332]	@ (8000754 <main+0x244>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b4b      	ldr	r3, [pc, #300]	@ (8000738 <main+0x228>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR3=dutty;
 8000610:	4b50      	ldr	r3, [pc, #320]	@ (8000754 <main+0x244>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b48      	ldr	r3, [pc, #288]	@ (8000738 <main+0x228>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim1.Instance->CCR4=dutty;
 800061a:	4b4e      	ldr	r3, [pc, #312]	@ (8000754 <main+0x244>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4b46      	ldr	r3, [pc, #280]	@ (8000738 <main+0x228>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	641a      	str	r2, [r3, #64]	@ 0x40

		htim2.Instance->PSC=periodo;
 8000624:	4b4a      	ldr	r3, [pc, #296]	@ (8000750 <main+0x240>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b44      	ldr	r3, [pc, #272]	@ (800073c <main+0x22c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	629a      	str	r2, [r3, #40]	@ 0x28
		htim2.Instance->CCR1=dutty;
 800062e:	4b49      	ldr	r3, [pc, #292]	@ (8000754 <main+0x244>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b42      	ldr	r3, [pc, #264]	@ (800073c <main+0x22c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	635a      	str	r2, [r3, #52]	@ 0x34
		htim2.Instance->CCR2=dutty;
 8000638:	4b46      	ldr	r3, [pc, #280]	@ (8000754 <main+0x244>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b3f      	ldr	r3, [pc, #252]	@ (800073c <main+0x22c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	639a      	str	r2, [r3, #56]	@ 0x38
		htim2.Instance->CCR3=dutty;
 8000642:	4b44      	ldr	r3, [pc, #272]	@ (8000754 <main+0x244>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b3d      	ldr	r3, [pc, #244]	@ (800073c <main+0x22c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim2.Instance->CCR4=dutty;
 800064c:	4b41      	ldr	r3, [pc, #260]	@ (8000754 <main+0x244>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b3a      	ldr	r3, [pc, #232]	@ (800073c <main+0x22c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	641a      	str	r2, [r3, #64]	@ 0x40

		htim3.Instance->PSC=periodo;
 8000656:	4b3e      	ldr	r3, [pc, #248]	@ (8000750 <main+0x240>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b39      	ldr	r3, [pc, #228]	@ (8000740 <main+0x230>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
		htim3.Instance->CCR1=dutty;
 8000660:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <main+0x244>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <main+0x230>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance->CCR2=dutty;
 800066a:	4b3a      	ldr	r3, [pc, #232]	@ (8000754 <main+0x244>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b34      	ldr	r3, [pc, #208]	@ (8000740 <main+0x230>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance->CCR3=dutty;
 8000674:	4b37      	ldr	r3, [pc, #220]	@ (8000754 <main+0x244>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b31      	ldr	r3, [pc, #196]	@ (8000740 <main+0x230>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim3.Instance->CCR4=dutty;
 800067e:	4b35      	ldr	r3, [pc, #212]	@ (8000754 <main+0x244>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <main+0x230>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	641a      	str	r2, [r3, #64]	@ 0x40




	    if (frecuencia != last_frecuencia) {
 8000688:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <main+0x238>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b32      	ldr	r3, [pc, #200]	@ (8000758 <main+0x248>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	d020      	beq.n	80006d6 <main+0x1c6>
	        LCD_xy(&LCD, 11, 0);
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	210b      	movs	r1, #11
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ffaa 	bl	80015f4 <LCD_xy>
	        LCD_cadena(&LCD, "     ");
 80006a0:	463b      	mov	r3, r7
 80006a2:	492e      	ldr	r1, [pc, #184]	@ (800075c <main+0x24c>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 ff86 	bl	80015b6 <LCD_cadena>
	        LCD_xy(&LCD, 11, 0);
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	210b      	movs	r1, #11
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ff9f 	bl	80015f4 <LCD_xy>
	        LCD_entero(&LCD, frecuencia);
 80006b6:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <main+0x238>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	463b      	mov	r3, r7
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ffd2 	bl	8001668 <LCD_entero>
	        LCD_cadena(&LCD, "Hz");
 80006c4:	463b      	mov	r3, r7
 80006c6:	4926      	ldr	r1, [pc, #152]	@ (8000760 <main+0x250>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 ff74 	bl	80015b6 <LCD_cadena>
	        last_frecuencia = frecuencia;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <main+0x238>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <main+0x248>)
 80006d4:	6013      	str	r3, [r2, #0]
	    }
	    if (dutty != last_dutty) {
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <main+0x244>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <main+0x254>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d020      	beq.n	8000724 <main+0x214>
	        LCD_xy(&LCD, 6, 1);
 80006e2:	463b      	mov	r3, r7
 80006e4:	2201      	movs	r2, #1
 80006e6:	2106      	movs	r1, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 ff83 	bl	80015f4 <LCD_xy>
	        LCD_cadena(&LCD, "     ");
 80006ee:	463b      	mov	r3, r7
 80006f0:	491a      	ldr	r1, [pc, #104]	@ (800075c <main+0x24c>)
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ff5f 	bl	80015b6 <LCD_cadena>
	        LCD_xy(&LCD, 6, 1);
 80006f8:	463b      	mov	r3, r7
 80006fa:	2201      	movs	r2, #1
 80006fc:	2106      	movs	r1, #6
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 ff78 	bl	80015f4 <LCD_xy>
	        LCD_entero(&LCD, dutty);
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <main+0x244>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	463b      	mov	r3, r7
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f000 ffab 	bl	8001668 <LCD_entero>
	        LCD_cadena(&LCD, "%");
 8000712:	463b      	mov	r3, r7
 8000714:	4914      	ldr	r1, [pc, #80]	@ (8000768 <main+0x258>)
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ff4d 	bl	80015b6 <LCD_cadena>
	        last_dutty = dutty;
 800071c:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <main+0x244>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <main+0x254>)
 8000722:	6013      	str	r3, [r2, #0]
	    }

	    HAL_Delay(100);
 8000724:	2064      	movs	r0, #100	@ 0x64
 8000726:	f001 f883 	bl	8001830 <HAL_Delay>
	    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == 0) {
 800072a:	e746      	b.n	80005ba <main+0xaa>
 800072c:	40020800 	.word	0x40020800
 8000730:	20000010 	.word	0x20000010
 8000734:	20000000 	.word	0x20000000
 8000738:	200000c0 	.word	0x200000c0
 800073c:	20000108 	.word	0x20000108
 8000740:	20000150 	.word	0x20000150
 8000744:	20000048 	.word	0x20000048
 8000748:	20000018 	.word	0x20000018
 800074c:	00032e74 	.word	0x00032e74
 8000750:	2000004c 	.word	0x2000004c
 8000754:	2000001c 	.word	0x2000001c
 8000758:	20000050 	.word	0x20000050
 800075c:	0800390c 	.word	0x0800390c
 8000760:	08003914 	.word	0x08003914
 8000764:	20000054 	.word	0x20000054
 8000768:	08003918 	.word	0x08003918

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	@ 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	@ 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f003 f88e 	bl	800389c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <SystemClock_Config+0xd4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a29      	ldr	r2, [pc, #164]	@ (8000840 <SystemClock_Config+0xd4>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <SystemClock_Config+0xd4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <SystemClock_Config+0xd8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b8:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <SystemClock_Config+0xd8>)
 80007ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <SystemClock_Config+0xd8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007cc:	230a      	movs	r3, #10
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e4:	2308      	movs	r3, #8
 80007e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007e8:	2354      	movs	r3, #84	@ 0x54
 80007ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fd7f 	bl	80022fc <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000804:	f000 fb62 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000814:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800081a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f001 ffe0 	bl	80027ec <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000832:	f000 fb4b 	bl	8000ecc <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	@ 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <MX_ADC1_Init+0x98>)
 800085c:	4a21      	ldr	r2, [pc, #132]	@ (80008e4 <MX_ADC1_Init+0x9c>)
 800085e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000860:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_ADC1_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_ADC1_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_ADC1_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_ADC1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <MX_ADC1_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_ADC1_Init+0x98>)
 8000888:	4a17      	ldr	r2, [pc, #92]	@ (80008e8 <MX_ADC1_Init+0xa0>)
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_ADC1_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_ADC1_Init+0x98>)
 8000894:	2201      	movs	r2, #1
 8000896:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_ADC1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_ADC1_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <MX_ADC1_Init+0x98>)
 80008a8:	f000 ffe6 	bl	8001878 <HAL_ADC_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fb0b 	bl	8000ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008be:	2307      	movs	r3, #7
 80008c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <MX_ADC1_Init+0x98>)
 80008c8:	f001 f81a 	bl	8001900 <HAL_ADC_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008d2:	f000 fafb 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000058 	.word	0x20000058
 80008e4:	40012000 	.word	0x40012000
 80008e8:	0f000001 	.word	0x0f000001

080008ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_RTC_Init+0x44>)
 80008f2:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <MX_RTC_Init+0x48>)
 80008f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_RTC_Init+0x44>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_RTC_Init+0x44>)
 80008fe:	227f      	movs	r2, #127	@ 0x7f
 8000900:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_RTC_Init+0x44>)
 8000904:	22ff      	movs	r2, #255	@ 0xff
 8000906:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_RTC_Init+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_RTC_Init+0x44>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_RTC_Init+0x44>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_RTC_Init+0x44>)
 800091c:	f002 fa00 	bl	8002d20 <HAL_RTC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000926:	f000 fad1 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000a0 	.word	0x200000a0
 8000934:	40002800 	.word	0x40002800

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b092      	sub	sp, #72	@ 0x48
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2220      	movs	r2, #32
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f002 ff9a 	bl	800389c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000968:	4b45      	ldr	r3, [pc, #276]	@ (8000a80 <MX_TIM1_Init+0x148>)
 800096a:	4a46      	ldr	r2, [pc, #280]	@ (8000a84 <MX_TIM1_Init+0x14c>)
 800096c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 417;
 800096e:	4b44      	ldr	r3, [pc, #272]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000970:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000974:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b42      	ldr	r3, [pc, #264]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800097c:	4b40      	ldr	r3, [pc, #256]	@ (8000a80 <MX_TIM1_Init+0x148>)
 800097e:	2264      	movs	r2, #100	@ 0x64
 8000980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b3f      	ldr	r3, [pc, #252]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000988:	4b3d      	ldr	r3, [pc, #244]	@ (8000a80 <MX_TIM1_Init+0x148>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000994:	483a      	ldr	r0, [pc, #232]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000996:	f002 fac7 	bl	8002f28 <HAL_TIM_PWM_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009a0:	f000 fa94 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009b0:	4619      	mov	r1, r3
 80009b2:	4833      	ldr	r0, [pc, #204]	@ (8000a80 <MX_TIM1_Init+0x148>)
 80009b4:	f002 feb2 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80009be:	f000 fa85 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c2:	2360      	movs	r3, #96	@ 0x60
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	2200      	movs	r2, #0
 80009e4:	4619      	mov	r1, r3
 80009e6:	4826      	ldr	r0, [pc, #152]	@ (8000a80 <MX_TIM1_Init+0x148>)
 80009e8:	f002 fb9e 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80009f2:	f000 fa6b 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fa:	2204      	movs	r2, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4820      	ldr	r0, [pc, #128]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000a00:	f002 fb92 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000a0a:	f000 fa5f 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	2208      	movs	r2, #8
 8000a14:	4619      	mov	r1, r3
 8000a16:	481a      	ldr	r0, [pc, #104]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000a18:	f002 fb86 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000a22:	f000 fa53 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4814      	ldr	r0, [pc, #80]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000a30:	f002 fb7a 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000a3a:	f000 fa47 	bl	8000ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000a62:	f002 fec9 	bl	80037f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000a6c:	f000 fa2e 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a70:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <MX_TIM1_Init+0x148>)
 8000a72:	f000 fb15 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	3748      	adds	r7, #72	@ 0x48
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000c0 	.word	0x200000c0
 8000a84:	40010000 	.word	0x40010000

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
 8000aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aaa:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000aac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ab0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 417;
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000ab4:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000ab8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b2f      	ldr	r3, [pc, #188]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000ac2:	2264      	movs	r2, #100	@ 0x64
 8000ac4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad2:	4829      	ldr	r0, [pc, #164]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000ad4:	f002 fa28 	bl	8002f28 <HAL_TIM_PWM_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ade:	f000 f9f5 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	4619      	mov	r1, r3
 8000af0:	4821      	ldr	r0, [pc, #132]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000af2:	f002 fe13 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000afc:	f000 f9e6 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	@ 0x60
 8000b02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4818      	ldr	r0, [pc, #96]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000b18:	f002 fb06 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b22:	f000 f9d3 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000b2e:	f002 fafb 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b38:	f000 f9c8 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000b44:	f002 faf0 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000b4e:	f000 f9bd 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	220c      	movs	r2, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000b5a:	f002 fae5 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000b64:	f000 f9b2 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b68:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <MX_TIM2_Init+0xf0>)
 8000b6a:	f000 fa99 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	@ 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000108 	.word	0x20000108

08000b7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	f107 0320 	add.w	r3, r7, #32
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b9e:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000ba0:	4a32      	ldr	r2, [pc, #200]	@ (8000c6c <MX_TIM3_Init+0xf0>)
 8000ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 417;
 8000ba4:	4b30      	ldr	r3, [pc, #192]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000ba6:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000baa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b2e      	ldr	r3, [pc, #184]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000bb4:	2264      	movs	r2, #100	@ 0x64
 8000bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bc4:	4828      	ldr	r0, [pc, #160]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000bc6:	f002 f9af 	bl	8002f28 <HAL_TIM_PWM_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000bd0:	f000 f97c 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	4619      	mov	r1, r3
 8000be2:	4821      	ldr	r0, [pc, #132]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000be4:	f002 fd9a 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000bee:	f000 f96d 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf2:	2360      	movs	r3, #96	@ 0x60
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	4619      	mov	r1, r3
 8000c08:	4817      	ldr	r0, [pc, #92]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000c0a:	f002 fa8d 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c14:	f000 f95a 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4812      	ldr	r0, [pc, #72]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000c20:	f002 fa82 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c2a:	f000 f94f 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2208      	movs	r2, #8
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000c36:	f002 fa77 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000c40:	f000 f944 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	220c      	movs	r2, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000c4c:	f002 fa6c 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000c56:	f000 f939 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c5a:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <MX_TIM3_Init+0xec>)
 8000c5c:	f000 fa20 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	@ 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000150 	.word	0x20000150
 8000c6c:	40000400 	.word	0x40000400

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b43      	ldr	r3, [pc, #268]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a42      	ldr	r2, [pc, #264]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b40      	ldr	r3, [pc, #256]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a3b      	ldr	r2, [pc, #236]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b39      	ldr	r3, [pc, #228]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b35      	ldr	r3, [pc, #212]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a34      	ldr	r2, [pc, #208]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b32      	ldr	r3, [pc, #200]	@ (8000d98 <MX_GPIO_Init+0x128>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000ce0:	482e      	ldr	r0, [pc, #184]	@ (8000d9c <MX_GPIO_Init+0x12c>)
 8000ce2:	f001 fad9 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000cec:	482c      	ldr	r0, [pc, #176]	@ (8000da0 <MX_GPIO_Init+0x130>)
 8000cee:	f001 fad3 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000cf2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <MX_GPIO_Init+0x12c>)
 8000d0c:	f001 f928 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	481d      	ldr	r0, [pc, #116]	@ (8000d9c <MX_GPIO_Init+0x12c>)
 8000d26:	f001 f91b 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d2a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <MX_GPIO_Init+0x130>)
 8000d44:	f001 f90c 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <MX_GPIO_Init+0x134>)
 8000d5e:	f001 f8ff 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d68:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	480a      	ldr	r0, [pc, #40]	@ (8000da4 <MX_GPIO_Init+0x134>)
 8000d7a:	f001 f8f1 	bl	8001f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2028      	movs	r0, #40	@ 0x28
 8000d84:	f001 f8b5 	bl	8001ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d88:	2028      	movs	r0, #40	@ 0x28
 8000d8a:	f001 f8ce 	bl	8001f2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
volatile uint32_t last_interrupt_time = 0;
const uint32_t debounce_delay = 3;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_15) {
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000db8:	d177      	bne.n	8000eaa <HAL_GPIO_EXTI_Callback+0x102>
		uint32_t current_time = HAL_GetTick();
 8000dba:	f000 fd2d 	bl	8001818 <HAL_GetTick>
 8000dbe:	6178      	str	r0, [r7, #20]
		if ((current_time - last_interrupt_time) > debounce_delay) {
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2203      	movs	r2, #3
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d96d      	bls.n	8000eaa <HAL_GPIO_EXTI_Callback+0x102>
			EXTI->IMR &= ~(GPIO_PIN_15 | GPIO_PIN_12);
 8000dce:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb8 <HAL_GPIO_EXTI_Callback+0x110>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a39      	ldr	r2, [pc, #228]	@ (8000eb8 <HAL_GPIO_EXTI_Callback+0x110>)
 8000dd4:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8000dd8:	6013      	str	r3, [r2, #0]

			for(volatile int i = 0; i < 100; i++);
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_EXTI_Callback+0x3e>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b63      	cmp	r3, #99	@ 0x63
 8000dea:	ddf9      	ble.n	8000de0 <HAL_GPIO_EXTI_Callback+0x38>
			GPIO_PinState pin12_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8000dec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df0:	4832      	ldr	r0, [pc, #200]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x114>)
 8000df2:	f001 fa39 	bl	8002268 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	74fb      	strb	r3, [r7, #19]
			GPIO_PinState pin15_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfe:	482f      	ldr	r0, [pc, #188]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x114>)
 8000e00:	f001 fa32 	bl	8002268 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	74bb      	strb	r3, [r7, #18]

			if ((pin15_state == GPIO_PIN_RESET)&&cambio==1) {
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d11f      	bne.n	8000e4e <HAL_GPIO_EXTI_Callback+0xa6>
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x118>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d11b      	bne.n	8000e4e <HAL_GPIO_EXTI_Callback+0xa6>
				if (pin12_state == GPIO_PIN_SET) {
 8000e16:	7cfb      	ldrb	r3, [r7, #19]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d105      	bne.n	8000e28 <HAL_GPIO_EXTI_Callback+0x80>
					dutty--;
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	4a28      	ldr	r2, [pc, #160]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e004      	b.n	8000e32 <HAL_GPIO_EXTI_Callback+0x8a>
				} else {
					dutty++;
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e30:	6013      	str	r3, [r2, #0]
				}

				if(dutty>=100){
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b63      	cmp	r3, #99	@ 0x63
 8000e38:	dd02      	ble.n	8000e40 <HAL_GPIO_EXTI_Callback+0x98>
					dutty=100;
 8000e3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e3c:	2264      	movs	r2, #100	@ 0x64
 8000e3e:	601a      	str	r2, [r3, #0]
				}
				if(dutty<=0){
 8000e40:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	dc02      	bgt.n	8000e4e <HAL_GPIO_EXTI_Callback+0xa6>
					dutty=0;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
				}
			}

			if ((pin15_state == GPIO_PIN_RESET)&&cambio==0) {
 8000e4e:	7cbb      	ldrb	r3, [r7, #18]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d121      	bne.n	8000e98 <HAL_GPIO_EXTI_Callback+0xf0>
 8000e54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x118>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d11d      	bne.n	8000e98 <HAL_GPIO_EXTI_Callback+0xf0>
				if (pin12_state == GPIO_PIN_SET) {
 8000e5c:	7cfb      	ldrb	r3, [r7, #19]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d105      	bne.n	8000e6e <HAL_GPIO_EXTI_Callback+0xc6>
					frecuencia--;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	4a17      	ldr	r2, [pc, #92]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_EXTI_Callback+0xd0>
				} else {
					frecuencia++;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	4a14      	ldr	r2, [pc, #80]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e76:	6013      	str	r3, [r2, #0]
				}
				if(frecuencia>=500){
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e80:	db03      	blt.n	8000e8a <HAL_GPIO_EXTI_Callback+0xe2>
					frecuencia=500;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e84:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e88:	601a      	str	r2, [r3, #0]
				}
				if(frecuencia<=4){
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	dc02      	bgt.n	8000e98 <HAL_GPIO_EXTI_Callback+0xf0>
					frecuencia=4;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	601a      	str	r2, [r3, #0]
				}

			}
			last_interrupt_time = current_time;
 8000e98:	4a06      	ldr	r2, [pc, #24]	@ (8000eb4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	6013      	str	r3, [r2, #0]
			EXTI->IMR |= (GPIO_PIN_15 | GPIO_PIN_12);
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_GPIO_EXTI_Callback+0x110>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <HAL_GPIO_EXTI_Callback+0x110>)
 8000ea4:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
 8000ea8:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000198 	.word	0x20000198
 8000eb8:	40013c00 	.word	0x40013c00
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	20000048 	.word	0x20000048
 8000ec4:	2000001c 	.word	0x2000001c
 8000ec8:	20000018 	.word	0x20000018

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <Error_Handler+0x8>

08000ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a17      	ldr	r2, [pc, #92]	@ (8000fa4 <HAL_ADC_MspInit+0x7c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d127      	bne.n	8000f9a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_ADC_MspInit+0x84>)
 8000f96:	f000 ffe3 	bl	8001f60 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	@ 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012000 	.word	0x40012000
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <HAL_RTC_MspInit+0x50>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d111      	bne.n	8000ff6 <HAL_RTC_MspInit+0x46>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fda:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fdaf 	bl	8002b44 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000fec:	f7ff ff6e 	bl	8000ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <HAL_RTC_MspInit+0x54>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40002800 	.word	0x40002800
 8001004:	42470e3c 	.word	0x42470e3c

08001008 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10e      	bne.n	8001038 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	4a1d      	ldr	r2, [pc, #116]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6453      	str	r3, [r2, #68]	@ 0x44
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001036:	e026      	b.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001040:	d10e      	bne.n	8001060 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	4a13      	ldr	r2, [pc, #76]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6413      	str	r3, [r2, #64]	@ 0x40
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
}
 800105e:	e012      	b.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <HAL_TIM_PWM_MspInit+0x94>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10d      	bne.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
}
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40010000 	.word	0x40010000
 8001098:	40023800 	.word	0x40023800
 800109c:	40000400 	.word	0x40000400

080010a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a54      	ldr	r2, [pc, #336]	@ (8001210 <HAL_TIM_MspPostInit+0x170>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d11f      	bne.n	8001102 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b53      	ldr	r3, [pc, #332]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a52      	ldr	r2, [pc, #328]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b50      	ldr	r3, [pc, #320]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80010de:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4847      	ldr	r0, [pc, #284]	@ (8001218 <HAL_TIM_MspPostInit+0x178>)
 80010fc:	f000 ff30 	bl	8001f60 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001100:	e082      	b.n	8001208 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800110a:	d13c      	bne.n	8001186 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	4a3f      	ldr	r2, [pc, #252]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6313      	str	r3, [r2, #48]	@ 0x30
 800111c:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a38      	ldr	r2, [pc, #224]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
 8001138:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8001144:	232c      	movs	r3, #44	@ 0x2c
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	482e      	ldr	r0, [pc, #184]	@ (8001218 <HAL_TIM_MspPostInit+0x178>)
 8001160:	f000 fefe 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001164:	2308      	movs	r3, #8
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001174:	2301      	movs	r3, #1
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4827      	ldr	r0, [pc, #156]	@ (800121c <HAL_TIM_MspPostInit+0x17c>)
 8001180:	f000 feee 	bl	8001f60 <HAL_GPIO_Init>
}
 8001184:	e040      	b.n	8001208 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <HAL_TIM_MspPostInit+0x180>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d13b      	bne.n	8001208 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	4a1e      	ldr	r2, [pc, #120]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_TIM_MspPostInit+0x174>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c8:	23c0      	movs	r3, #192	@ 0xc0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011d8:	2302      	movs	r3, #2
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	@ (8001218 <HAL_TIM_MspPostInit+0x178>)
 80011e4:	f000 febc 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011e8:	2303      	movs	r3, #3
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <HAL_TIM_MspPostInit+0x17c>)
 8001204:	f000 feac 	bl	8001f60 <HAL_GPIO_Init>
}
 8001208:	bf00      	nop
 800120a:	3730      	adds	r7, #48	@ 0x30
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40010000 	.word	0x40010000
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40000400 	.word	0x40000400

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <NMI_Handler+0x4>

0800122c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <UsageFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 fab9 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}

08001282 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001286:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800128a:	f001 f81f 	bl	80022cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f002 fae1 	bl	80038ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff f911 	bl	8000510 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80012fc:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 8001300:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001304:	200001a0 	.word	0x200001a0

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>

0800130a <LCD_Create>:
LCD_Structura LCD_Create(
		LCD_PortType port[],  LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin
)
{
 800130a:	b5b0      	push	{r4, r5, r7, lr}
 800130c:	b08a      	sub	sp, #40	@ 0x28
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	603b      	str	r3, [r7, #0]
	LCD_Structura LCD;
	LCD.EN_pin   = en_pin;
 8001318:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800131c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	LCD.EN_port  = en_port;
 800131e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001320:	623b      	str	r3, [r7, #32]
	LCD.RS_pin   = rs_pin;
 8001322:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001324:	83bb      	strh	r3, [r7, #28]
	LCD.RS_port  = rs_port;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	61bb      	str	r3, [r7, #24]
	LCD.datapin  = pin;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	617b      	str	r3, [r7, #20]
	LCD.dataport = port;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	613b      	str	r3, [r7, #16]


	LCD_Init(&LCD);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f80e 	bl	8001358 <LCD_Init>
	return LCD;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	461d      	mov	r5, r3
 8001340:	f107 0410 	add.w	r4, r7, #16
 8001344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001348:	e894 0003 	ldmia.w	r4, {r0, r1}
 800134c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bdb0      	pop	{r4, r5, r7, pc}

08001358 <LCD_Init>:


void LCD_Init(LCD_Structura *LCD){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8001360:	2064      	movs	r0, #100	@ 0x64
 8001362:	f000 fa65 	bl	8001830 <HAL_Delay>
	LCD_Command(LCD,0x30);
 8001366:	2130      	movs	r1, #48	@ 0x30
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f822 	bl	80013b2 <LCD_Command>
	HAL_Delay(5);
 800136e:	2005      	movs	r0, #5
 8001370:	f000 fa5e 	bl	8001830 <HAL_Delay>
	LCD_Command(LCD,0x30);
 8001374:	2130      	movs	r1, #48	@ 0x30
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f81b 	bl	80013b2 <LCD_Command>
	HAL_Delay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f000 fa57 	bl	8001830 <HAL_Delay>
	LCD_Command(LCD,0x32);
 8001382:	2132      	movs	r1, #50	@ 0x32
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f814 	bl	80013b2 <LCD_Command>
	LCD_Command(LCD,0x28);
 800138a:	2128      	movs	r1, #40	@ 0x28
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f810 	bl	80013b2 <LCD_Command>
	LCD_Command(LCD,0x0C);
 8001392:	210c      	movs	r1, #12
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f80c 	bl	80013b2 <LCD_Command>
	LCD_Command(LCD,0x01);
 800139a:	2101      	movs	r1, #1
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f808 	bl	80013b2 <LCD_Command>
	LCD_Command(LCD,0x06);
 80013a2:	2106      	movs	r1, #6
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f804 	bl	80013b2 <LCD_Command>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <LCD_Command>:

void LCD_Command(LCD_Structura *LCD, char cmd){
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]

	char comando = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LCD->RS_port, LCD->RS_pin, GPIO_PIN_RESET);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6898      	ldr	r0, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	899b      	ldrh	r3, [r3, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	4619      	mov	r1, r3
 80013ce:	f000 ff63 	bl	8002298 <HAL_GPIO_WritePin>
	comando = (cmd>>4) & 0x0F;
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	737b      	strb	r3, [r7, #13]
	for(uint8_t i=0; i<4; i++){
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e019      	b.n	8001412 <LCD_Command+0x60>

		HAL_GPIO_WritePin(LCD->dataport[i], LCD->datapin[i], (comando>>i) & 0x01);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	8819      	ldrh	r1, [r3, #0]
 80013f6:	7b7a      	ldrb	r2, [r7, #13]
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	fa42 f303 	asr.w	r3, r2, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	f000 ff46 	bl	8002298 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++){
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3301      	adds	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d9e2      	bls.n	80013de <LCD_Command+0x2c>
	}
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_SET);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6918      	ldr	r0, [r3, #16]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	8a9b      	ldrh	r3, [r3, #20]
 8001420:	2201      	movs	r2, #1
 8001422:	4619      	mov	r1, r3
 8001424:	f000 ff38 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f000 fa01 	bl	8001830 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_RESET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6918      	ldr	r0, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	f000 ff2d 	bl	8002298 <HAL_GPIO_WritePin>

	comando = cmd & 0x0F;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	737b      	strb	r3, [r7, #13]
	for(uint8_t i=0; i<4; i++){
 8001446:	2300      	movs	r3, #0
 8001448:	73bb      	strb	r3, [r7, #14]
 800144a:	e019      	b.n	8001480 <LCD_Command+0xce>
		HAL_GPIO_WritePin(LCD->dataport[i], LCD->datapin[i], (comando>>i) & 0x01);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	7bbb      	ldrb	r3, [r7, #14]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	8819      	ldrh	r1, [r3, #0]
 8001464:	7b7a      	ldrb	r2, [r7, #13]
 8001466:	7bbb      	ldrb	r3, [r7, #14]
 8001468:	fa42 f303 	asr.w	r3, r2, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	f000 ff0f 	bl	8002298 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++){
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	3301      	adds	r3, #1
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d9e2      	bls.n	800144c <LCD_Command+0x9a>
	}
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_SET);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6918      	ldr	r0, [r3, #16]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	8a9b      	ldrh	r3, [r3, #20]
 800148e:	2201      	movs	r2, #1
 8001490:	4619      	mov	r1, r3
 8001492:	f000 ff01 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f000 f9ca 	bl	8001830 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_RESET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6918      	ldr	r0, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8a9b      	ldrh	r3, [r3, #20]
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	f000 fef6 	bl	8002298 <HAL_GPIO_WritePin>

}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <LCD_texto>:

void LCD_texto(LCD_Structura *LCD,char data){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]

	char datos = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LCD->RS_port, LCD->RS_pin, GPIO_PIN_SET);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6898      	ldr	r0, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	899b      	ldrh	r3, [r3, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4619      	mov	r1, r3
 80014d0:	f000 fee2 	bl	8002298 <HAL_GPIO_WritePin>
	datos = (data>>4) & 0x0F;
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	737b      	strb	r3, [r7, #13]
	for(uint8_t i=0; i<4; i++){
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e019      	b.n	8001514 <LCD_texto+0x60>

		HAL_GPIO_WritePin(LCD->dataport[i], LCD->datapin[i], (datos>>i) & 0x01);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	8819      	ldrh	r1, [r3, #0]
 80014f8:	7b7a      	ldrb	r2, [r7, #13]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	fa42 f303 	asr.w	r3, r2, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	f000 fec5 	bl	8002298 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++){
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	3301      	adds	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d9e2      	bls.n	80014e0 <LCD_texto+0x2c>
	}
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_SET);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6918      	ldr	r0, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	8a9b      	ldrh	r3, [r3, #20]
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	f000 feb7 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f000 f980 	bl	8001830 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_RESET);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6918      	ldr	r0, [r3, #16]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	8a9b      	ldrh	r3, [r3, #20]
 8001538:	2200      	movs	r2, #0
 800153a:	4619      	mov	r1, r3
 800153c:	f000 feac 	bl	8002298 <HAL_GPIO_WritePin>

	datos = data & 0x0F;
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	737b      	strb	r3, [r7, #13]
	for(uint8_t i=0; i<4; i++){
 8001548:	2300      	movs	r3, #0
 800154a:	73bb      	strb	r3, [r7, #14]
 800154c:	e019      	b.n	8001582 <LCD_texto+0xce>
		HAL_GPIO_WritePin(LCD->dataport[i], LCD->datapin[i], (datos>>i) & 0x01);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	8819      	ldrh	r1, [r3, #0]
 8001566:	7b7a      	ldrb	r2, [r7, #13]
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	fa42 f303 	asr.w	r3, r2, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	f000 fe8e 	bl	8002298 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++){
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	3301      	adds	r3, #1
 8001580:	73bb      	strb	r3, [r7, #14]
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d9e2      	bls.n	800154e <LCD_texto+0x9a>
	}
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_SET);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6918      	ldr	r0, [r3, #16]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	8a9b      	ldrh	r3, [r3, #20]
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	f000 fe80 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001598:	2001      	movs	r0, #1
 800159a:	f000 f949 	bl	8001830 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_RESET);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6918      	ldr	r0, [r3, #16]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	8a9b      	ldrh	r3, [r3, #20]
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	f000 fe75 	bl	8002298 <HAL_GPIO_WritePin>

}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <LCD_cadena>:

void LCD_cadena(LCD_Structura *LCD,char *cadena){
 80015b6:	b590      	push	{r4, r7, lr}
 80015b8:	b085      	sub	sp, #20
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
	for(uint8_t i=0; i <strlen(cadena); i++){
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e00a      	b.n	80015dc <LCD_cadena+0x26>
		LCD_texto(LCD, cadena[i]);
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff6f 	bl	80014b4 <LCD_texto>
	for(uint8_t i=0; i <strlen(cadena); i++){
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	3301      	adds	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	7bfc      	ldrb	r4, [r7, #15]
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7fe fdf8 	bl	80001d4 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	429c      	cmp	r4, r3
 80015e8:	d3ed      	bcc.n	80015c6 <LCD_cadena+0x10>
	}
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <LCD_xy>:

void LCD_xy(LCD_Structura *LCD, char x, char y){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
 8001600:	4613      	mov	r3, r2
 8001602:	70bb      	strb	r3, [r7, #2]
	if(y>0){
 8001604:	78bb      	ldrb	r3, [r7, #2]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <LCD_xy+0x26>
		LCD_Command(LCD,0xC0 + x );
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	3b40      	subs	r3, #64	@ 0x40
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fecd 	bl	80013b2 <LCD_Command>
	}
	else{
		LCD_Command(LCD,0x80 + x );
	}
}
 8001618:	e006      	b.n	8001628 <LCD_xy+0x34>
		LCD_Command(LCD,0x80 + x );
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	3b80      	subs	r3, #128	@ 0x80
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fec5 	bl	80013b2 <LCD_Command>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <LCD_clear>:

void LCD_clear(LCD_Structura *LCD){
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	LCD_xy(LCD, 0, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ffd9 	bl	80015f4 <LCD_xy>
	LCD_cadena(LCD, "                ");
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <LCD_clear+0x34>)
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffb6 	bl	80015b6 <LCD_cadena>
	LCD_xy(LCD, 0, 1);
 800164a:	2201      	movs	r2, #1
 800164c:	2100      	movs	r1, #0
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffd0 	bl	80015f4 <LCD_xy>
	LCD_cadena(LCD, "                ");
 8001654:	4903      	ldr	r1, [pc, #12]	@ (8001664 <LCD_clear+0x34>)
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffad 	bl	80015b6 <LCD_cadena>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	0800391c 	.word	0x0800391c

08001668 <LCD_entero>:


void LCD_entero(LCD_Structura *LCD, int numero) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
    char buffer[6];
    if (numero == 0) {
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d104      	bne.n	8001682 <LCD_entero+0x1a>
        LCD_texto(LCD, '0');
 8001678:	2130      	movs	r1, #48	@ 0x30
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff1a 	bl	80014b4 <LCD_texto>
 8001680:	e038      	b.n	80016f4 <LCD_entero+0x8c>
        return;
    }
    int i = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    int temp = numero;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	61bb      	str	r3, [r7, #24]
    while (temp > 0) {
 800168a:	e01d      	b.n	80016c8 <LCD_entero+0x60>
        buffer[i++] = (temp % 10) + '0';
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <LCD_entero+0x94>)
 8001690:	fb83 1302 	smull	r1, r3, r3, r2
 8001694:	1099      	asrs	r1, r3, #2
 8001696:	17d3      	asrs	r3, r2, #31
 8001698:	1ac9      	subs	r1, r1, r3
 800169a:	460b      	mov	r3, r1
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	1ad1      	subs	r1, r2, r3
 80016a4:	b2ca      	uxtb	r2, r1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	1c59      	adds	r1, r3, #1
 80016aa:	61f9      	str	r1, [r7, #28]
 80016ac:	3230      	adds	r2, #48	@ 0x30
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	3320      	adds	r3, #32
 80016b2:	443b      	add	r3, r7
 80016b4:	f803 2c14 	strb.w	r2, [r3, #-20]
        temp /= 10;
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	4a10      	ldr	r2, [pc, #64]	@ (80016fc <LCD_entero+0x94>)
 80016bc:	fb82 1203 	smull	r1, r2, r2, r3
 80016c0:	1092      	asrs	r2, r2, #2
 80016c2:	17db      	asrs	r3, r3, #31
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	61bb      	str	r3, [r7, #24]
    while (temp > 0) {
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dcde      	bgt.n	800168c <LCD_entero+0x24>
    }
    for (int j = i - 1; j >= 0; j--) {
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00b      	b.n	80016ee <LCD_entero+0x86>
        LCD_texto(LCD, buffer[j]);
 80016d6:	f107 020c 	add.w	r2, r7, #12
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fee6 	bl	80014b4 <LCD_texto>
    for (int j = i - 1; j >= 0; j--) {
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	daf0      	bge.n	80016d6 <LCD_entero+0x6e>
    }
}
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	66666667 	.word	0x66666667

08001700 <pintarplantilla>:


void pintarplantilla(LCD_Structura *LCD){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	LCD_clear(LCD);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff91 	bl	8001630 <LCD_clear>
	LCD_xy(LCD, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff6e 	bl	80015f4 <LCD_xy>
	LCD_cadena(LCD,"Frecuencia:");
 8001718:	490a      	ldr	r1, [pc, #40]	@ (8001744 <pintarplantilla+0x44>)
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff4b 	bl	80015b6 <LCD_cadena>
	LCD_xy(LCD, 0, 1);
 8001720:	2201      	movs	r2, #1
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff65 	bl	80015f4 <LCD_xy>
	LCD_cadena(LCD,"Dutty:");
 800172a:	4907      	ldr	r1, [pc, #28]	@ (8001748 <pintarplantilla+0x48>)
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff42 	bl	80015b6 <LCD_cadena>
	HAL_Delay(600);
 8001732:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001736:	f000 f87b 	bl	8001830 <HAL_Delay>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	08003930 	.word	0x08003930
 8001748:	0800393c 	.word	0x0800393c

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <HAL_Init+0x40>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800175c:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_Init+0x40>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	@ (800178c <HAL_Init+0x40>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 fbb1 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fbaa 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fbc9 	bl	8001f46 <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017cc:	f000 fb91 	bl	8001ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000020 	.word	0x20000020
 80017e8:	20000028 	.word	0x20000028
 80017ec:	20000024 	.word	0x20000024

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000028 	.word	0x20000028
 8001814:	2000019c 	.word	0x2000019c

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000019c 	.word	0x2000019c

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff ffee 	bl	8001818 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001848:	d005      	beq.n	8001856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_Delay+0x44>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001856:	bf00      	nop
 8001858:	f7ff ffde 	bl	8001818 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8f7      	bhi.n	8001858 <HAL_Delay+0x28>
  {
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000028 	.word	0x20000028

08001878 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e033      	b.n	80018f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fb46 	bl	8000f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d118      	bne.n	80018e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018be:	f023 0302 	bic.w	r3, r3, #2
 80018c2:	f043 0202 	orr.w	r2, r3, #2
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f93a 	bl	8001b44 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f023 0303 	bic.w	r3, r3, #3
 80018de:	f043 0201 	orr.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80018e6:	e001      	b.n	80018ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x1c>
 8001918:	2302      	movs	r3, #2
 800191a:	e105      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x228>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b09      	cmp	r3, #9
 800192a:	d925      	bls.n	8001978 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68d9      	ldr	r1, [r3, #12]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	3b1e      	subs	r3, #30
 8001942:	2207      	movs	r2, #7
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43da      	mvns	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	400a      	ands	r2, r1
 8001950:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68d9      	ldr	r1, [r3, #12]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	4618      	mov	r0, r3
 8001964:	4603      	mov	r3, r0
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4403      	add	r3, r0
 800196a:	3b1e      	subs	r3, #30
 800196c:	409a      	lsls	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	e022      	b.n	80019be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6919      	ldr	r1, [r3, #16]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	2207      	movs	r2, #7
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	400a      	ands	r2, r1
 800199a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6919      	ldr	r1, [r3, #16]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	4603      	mov	r3, r0
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4403      	add	r3, r0
 80019b4:	409a      	lsls	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d824      	bhi.n	8001a10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	3b05      	subs	r3, #5
 80019d8:	221f      	movs	r2, #31
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	400a      	ands	r2, r1
 80019e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	3b05      	subs	r3, #5
 8001a02:	fa00 f203 	lsl.w	r2, r0, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a0e:	e04c      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	d824      	bhi.n	8001a62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	3b23      	subs	r3, #35	@ 0x23
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43da      	mvns	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	400a      	ands	r2, r1
 8001a38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b23      	subs	r3, #35	@ 0x23
 8001a54:	fa00 f203 	lsl.w	r2, r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a60:	e023      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b41      	subs	r3, #65	@ 0x41
 8001a74:	221f      	movs	r2, #31
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	400a      	ands	r2, r1
 8001a82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b41      	subs	r3, #65	@ 0x41
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aaa:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <HAL_ADC_ConfigChannel+0x234>)
 8001aac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a21      	ldr	r2, [pc, #132]	@ (8001b38 <HAL_ADC_ConfigChannel+0x238>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d109      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x1cc>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b12      	cmp	r3, #18
 8001abe:	d105      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	@ (8001b38 <HAL_ADC_ConfigChannel+0x238>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d123      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x21e>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d003      	beq.n	8001ae6 <HAL_ADC_ConfigChannel+0x1e6>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b11      	cmp	r3, #17
 8001ae4:	d11b      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d111      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_ADC_ConfigChannel+0x23c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_ADC_ConfigChannel+0x240>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	0c9a      	lsrs	r2, r3, #18
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b10:	e002      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f9      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40012300 	.word	0x40012300
 8001b38:	40012000 	.word	0x40012000
 8001b3c:	20000020 	.word	0x20000020
 8001b40:	431bde83 	.word	0x431bde83

08001b44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b4c:	4b79      	ldr	r3, [pc, #484]	@ (8001d34 <ADC_Init+0x1f0>)
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	021a      	lsls	r2, r3, #8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd6:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <ADC_Init+0x1f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d022      	beq.n	8001c22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6899      	ldr	r1, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6899      	ldr	r1, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	e00f      	b.n	8001c42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c40:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0202 	bic.w	r2, r2, #2
 8001c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6899      	ldr	r1, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	005a      	lsls	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01b      	beq.n	8001ca8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c7e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6859      	ldr	r1, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	035a      	lsls	r2, r3, #13
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	e007      	b.n	8001cb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	051a      	lsls	r2, r3, #20
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6899      	ldr	r1, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cfa:	025a      	lsls	r2, r3, #9
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6899      	ldr	r1, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	029a      	lsls	r2, r3, #10
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40012300 	.word	0x40012300
 8001d38:	0f000001 	.word	0x0f000001

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4907      	ldr	r1, [pc, #28]	@ (8001dd8 <__NVIC_EnableIRQ+0x38>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	@ (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	@ (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	@ 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	@ 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea8:	d301      	bcc.n	8001eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <SysTick_Config+0x40>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ebc:	f7ff ff8e 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <SysTick_Config+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <SysTick_Config+0x40>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff29 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff3e 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff8e 	bl	8001e30 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff31 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa2 	bl	8001e98 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e159      	b.n	8002230 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f040 8148 	bne.w	800222a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d005      	beq.n	8001fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d130      	bne.n	8002014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 0201 	and.w	r2, r3, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b03      	cmp	r3, #3
 800201e:	d017      	beq.n	8002050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d123      	bne.n	80020a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a2 	beq.w	800222a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b57      	ldr	r3, [pc, #348]	@ (8002248 <HAL_GPIO_Init+0x2e8>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	4a56      	ldr	r2, [pc, #344]	@ (8002248 <HAL_GPIO_Init+0x2e8>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f6:	4b54      	ldr	r3, [pc, #336]	@ (8002248 <HAL_GPIO_Init+0x2e8>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002102:	4a52      	ldr	r2, [pc, #328]	@ (800224c <HAL_GPIO_Init+0x2ec>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a49      	ldr	r2, [pc, #292]	@ (8002250 <HAL_GPIO_Init+0x2f0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x202>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a48      	ldr	r2, [pc, #288]	@ (8002254 <HAL_GPIO_Init+0x2f4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x1fe>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a47      	ldr	r2, [pc, #284]	@ (8002258 <HAL_GPIO_Init+0x2f8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x1fa>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a46      	ldr	r2, [pc, #280]	@ (800225c <HAL_GPIO_Init+0x2fc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x1f6>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a45      	ldr	r2, [pc, #276]	@ (8002260 <HAL_GPIO_Init+0x300>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x1f2>
 800214e:	2304      	movs	r3, #4
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x204>
 8002152:	2307      	movs	r3, #7
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x204>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x204>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x204>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x204>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002174:	4935      	ldr	r1, [pc, #212]	@ (800224c <HAL_GPIO_Init+0x2ec>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <HAL_GPIO_Init+0x304>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021d6:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_GPIO_Init+0x304>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_GPIO_Init+0x304>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002224:	4a0f      	ldr	r2, [pc, #60]	@ (8002264 <HAL_GPIO_Init+0x304>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f aea2 	bls.w	8001f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	@ 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40013800 	.word	0x40013800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40020800 	.word	0x40020800
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40013c00 	.word	0x40013c00

08002268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	887b      	ldrh	r3, [r7, #2]
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e001      	b.n	800228a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b4:	e003      	b.n	80022be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	619a      	str	r2, [r3, #24]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022e2:	4a05      	ldr	r2, [pc, #20]	@ (80022f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fd5c 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40013c00 	.word	0x40013c00

080022fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e267      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d075      	beq.n	8002406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800231a:	4b88      	ldr	r3, [pc, #544]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00c      	beq.n	8002340 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b85      	ldr	r3, [pc, #532]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800232e:	2b08      	cmp	r3, #8
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4b82      	ldr	r3, [pc, #520]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	4b7e      	ldr	r3, [pc, #504]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05b      	beq.n	8002404 <HAL_RCC_OscConfig+0x108>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d157      	bne.n	8002404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e242      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x74>
 8002362:	4b76      	ldr	r3, [pc, #472]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a75      	ldr	r2, [pc, #468]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b70      	ldr	r3, [pc, #448]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6f      	ldr	r2, [pc, #444]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6d      	ldr	r3, [pc, #436]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6c      	ldr	r2, [pc, #432]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002394:	4b69      	ldr	r3, [pc, #420]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a68      	ldr	r2, [pc, #416]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b66      	ldr	r3, [pc, #408]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fa30 	bl	8001818 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff fa2c 	bl	8001818 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e207      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b5b      	ldr	r3, [pc, #364]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xc0>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fa1c 	bl	8001818 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff fa18 	bl	8001818 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	@ 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1f3      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b51      	ldr	r3, [pc, #324]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0xe8>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002412:	4b4a      	ldr	r3, [pc, #296]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b44      	ldr	r3, [pc, #272]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1c7      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4937      	ldr	r1, [pc, #220]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <HAL_RCC_OscConfig+0x244>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7ff f9d1 	bl	8001818 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7ff f9cd 	bl	8001818 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1a8      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4925      	ldr	r1, [pc, #148]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCC_OscConfig+0x244>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff f9b0 	bl	8001818 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7ff f9ac 	bl	8001818 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e187      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d036      	beq.n	8002554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HAL_RCC_OscConfig+0x248>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7ff f990 	bl	8001818 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7ff f98c 	bl	8001818 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e167      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 800251a:	e01b      	b.n	8002554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_RCC_OscConfig+0x248>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff f979 	bl	8001818 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	e00e      	b.n	8002548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252a:	f7ff f975 	bl	8001818 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d907      	bls.n	8002548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e150      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800253c:	40023800 	.word	0x40023800
 8002540:	42470000 	.word	0x42470000
 8002544:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	4b88      	ldr	r3, [pc, #544]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800254a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ea      	bne.n	800252a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8097 	beq.w	8002690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	4b81      	ldr	r3, [pc, #516]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b7d      	ldr	r3, [pc, #500]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	4a7c      	ldr	r2, [pc, #496]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	@ 0x40
 8002582:	4b7a      	ldr	r3, [pc, #488]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b77      	ldr	r3, [pc, #476]	@ (8002770 <HAL_RCC_OscConfig+0x474>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b74      	ldr	r3, [pc, #464]	@ (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a73      	ldr	r2, [pc, #460]	@ (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7ff f935 	bl	8001818 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7ff f931 	bl	8001818 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e10c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002770 <HAL_RCC_OscConfig+0x474>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2ea>
 80025d8:	4b64      	ldr	r3, [pc, #400]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025dc:	4a63      	ldr	r2, [pc, #396]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x30c>
 80025ee:	4b5f      	ldr	r3, [pc, #380]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	4a5e      	ldr	r2, [pc, #376]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fa:	4b5c      	ldr	r3, [pc, #368]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fe:	4a5b      	ldr	r2, [pc, #364]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	@ 0x70
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 8002608:	4b58      	ldr	r3, [pc, #352]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260c:	4a57      	ldr	r2, [pc, #348]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	@ 0x70
 8002614:	4b55      	ldr	r3, [pc, #340]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	4a54      	ldr	r2, [pc, #336]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800261a:	f023 0304 	bic.w	r3, r3, #4
 800261e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d015      	beq.n	8002654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7ff f8f6 	bl	8001818 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7ff f8f2 	bl	8001818 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0cb      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	4b49      	ldr	r3, [pc, #292]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <HAL_RCC_OscConfig+0x334>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7ff f8e0 	bl	8001818 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7ff f8dc 	bl	8001818 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0b5      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002672:	4b3e      	ldr	r3, [pc, #248]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ee      	bne.n	800265c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4b39      	ldr	r3, [pc, #228]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	4a38      	ldr	r2, [pc, #224]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800268e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a1 	beq.w	80027dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800269a:	4b34      	ldr	r3, [pc, #208]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d05c      	beq.n	8002760 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d141      	bne.n	8002732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <HAL_RCC_OscConfig+0x478>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff f8b0 	bl	8001818 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7ff f8ac 	bl	8001818 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e087      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b27      	ldr	r3, [pc, #156]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	3b01      	subs	r3, #1
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	491b      	ldr	r1, [pc, #108]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_RCC_OscConfig+0x478>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff f885 	bl	8001818 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff f881 	bl	8001818 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e05c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x416>
 8002730:	e054      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_RCC_OscConfig+0x478>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f86e 	bl	8001818 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff f86a 	bl	8001818 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e045      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x444>
 800275e:	e03d      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e038      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002778:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d028      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d121      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b68      	ldr	r3, [pc, #416]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b65      	ldr	r3, [pc, #404]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fe ff9c 	bl	8001818 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe ff98 	bl	8001818 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b22      	ldr	r3, [pc, #136]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	@ (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fefc 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08003944 	.word	0x08003944
 80029b0:	20000020 	.word	0x20000020
 80029b4:	20000024 	.word	0x20000024

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b090      	sub	sp, #64	@ 0x40
 80029be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d0:	4b59      	ldr	r3, [pc, #356]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d00d      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029dc:	2b08      	cmp	r3, #8
 80029de:	f200 80a1 	bhi.w	8002b24 <HAL_RCC_GetSysClockFreq+0x16c>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ea:	e09b      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x184>)
 80029ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029f0:	e09b      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b53      	ldr	r3, [pc, #332]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x188>)
 80029f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029f6:	e098      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a02:	4b4d      	ldr	r3, [pc, #308]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	2200      	movs	r2, #0
 8002a16:	623b      	str	r3, [r7, #32]
 8002a18:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a20:	2100      	movs	r1, #0
 8002a22:	4b47      	ldr	r3, [pc, #284]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a24:	fb03 f201 	mul.w	r2, r3, r1
 8002a28:	2300      	movs	r3, #0
 8002a2a:	fb00 f303 	mul.w	r3, r0, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a43      	ldr	r2, [pc, #268]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a32:	fba0 1202 	umull	r1, r2, r0, r2
 8002a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a38:	460a      	mov	r2, r1
 8002a3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a3e:	4413      	add	r3, r2
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	2200      	movs	r2, #0
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	61fa      	str	r2, [r7, #28]
 8002a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a52:	f7fd fbc7 	bl	80001e4 <__aeabi_uldivmod>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a5e:	e053      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a60:	4b35      	ldr	r3, [pc, #212]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	2200      	movs	r2, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	617a      	str	r2, [r7, #20]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a72:	f04f 0b00 	mov.w	fp, #0
 8002a76:	4652      	mov	r2, sl
 8002a78:	465b      	mov	r3, fp
 8002a7a:	f04f 0000 	mov.w	r0, #0
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	0159      	lsls	r1, r3, #5
 8002a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a88:	0150      	lsls	r0, r2, #5
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a92:	eb63 090b 	sbc.w	r9, r3, fp
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002aa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002aaa:	ebb2 0408 	subs.w	r4, r2, r8
 8002aae:	eb63 0509 	sbc.w	r5, r3, r9
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	00eb      	lsls	r3, r5, #3
 8002abc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac0:	00e2      	lsls	r2, r4, #3
 8002ac2:	4614      	mov	r4, r2
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	eb14 030a 	adds.w	r3, r4, sl
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	eb45 030b 	adc.w	r3, r5, fp
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ade:	4629      	mov	r1, r5
 8002ae0:	028b      	lsls	r3, r1, #10
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae8:	4621      	mov	r1, r4
 8002aea:	028a      	lsls	r2, r1, #10
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af2:	2200      	movs	r2, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	60fa      	str	r2, [r7, #12]
 8002af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002afc:	f7fd fb72 	bl	80001e4 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4613      	mov	r3, r2
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3740      	adds	r7, #64	@ 0x40
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	00f42400 	.word	0x00f42400
 8002b40:	017d7840 	.word	0x017d7840

08002b44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d035      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b6c:	4b67      	ldr	r3, [pc, #412]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b72:	f7fe fe51 	bl	8001818 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b7a:	f7fe fe4d 	bl	8001818 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0ba      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b8c:	4b60      	ldr	r3, [pc, #384]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	019a      	lsls	r2, r3, #6
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	071b      	lsls	r3, r3, #28
 8002ba4:	495a      	ldr	r1, [pc, #360]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bac:	4b57      	ldr	r3, [pc, #348]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bb2:	f7fe fe31 	bl	8001818 <HAL_GetTick>
 8002bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bba:	f7fe fe2d 	bl	8001818 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e09a      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bcc:	4b50      	ldr	r3, [pc, #320]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8083 	beq.w	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b49      	ldr	r3, [pc, #292]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	4a48      	ldr	r2, [pc, #288]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf6:	4b46      	ldr	r3, [pc, #280]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c02:	4b44      	ldr	r3, [pc, #272]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a43      	ldr	r2, [pc, #268]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c0e:	f7fe fe03 	bl	8001818 <HAL_GetTick>
 8002c12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7fe fdff 	bl	8001818 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e06c      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002c28:	4b3a      	ldr	r3, [pc, #232]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c34:	4b36      	ldr	r3, [pc, #216]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d02f      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d028      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c52:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c62:	4b2d      	ldr	r3, [pc, #180]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c68:	4a29      	ldr	r2, [pc, #164]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c6e:	4b28      	ldr	r3, [pc, #160]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d114      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fdcd 	bl	8001818 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fdc9 	bl	8001818 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e034      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ee      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002cb2:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc6:	4912      	ldr	r1, [pc, #72]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
 8002ccc:	e005      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cd4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cd8:	6093      	str	r3, [r2, #8]
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cdc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce6:	490a      	ldr	r1, [pc, #40]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7c1a      	ldrb	r2, [r3, #16]
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cfe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	42470068 	.word	0x42470068
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40007000 	.word	0x40007000
 8002d18:	42470e40 	.word	0x42470e40
 8002d1c:	424711e0 	.word	0x424711e0

08002d20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e073      	b.n	8002e1a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7f5b      	ldrb	r3, [r3, #29]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe f934 	bl	8000fb0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d055      	beq.n	8002e08 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	22ca      	movs	r2, #202	@ 0xca
 8002d62:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2253      	movs	r2, #83	@ 0x53
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f87f 	bl	8002e70 <RTC_EnterInitMode>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d12c      	bne.n	8002dd6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d8e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6919      	ldr	r1, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	041a      	lsls	r2, r3, #16
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f886 	bl	8002ede <RTC_ExitInitMode>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d110      	bne.n	8002dfe <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	22ff      	movs	r2, #255	@ 0xff
 8002e04:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e06:	e001      	b.n	8002e0c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <HAL_RTC_WaitForSynchro+0x48>)
 8002e36:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e38:	f7fe fcee 	bl	8001818 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e3e:	e009      	b.n	8002e54 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e40:	f7fe fcea 	bl	8001818 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e4e:	d901      	bls.n	8002e54 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e007      	b.n	8002e64 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ee      	beq.n	8002e40 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	00013f5f 	.word	0x00013f5f

08002e70 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d122      	bne.n	8002ed4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe fcbb 	bl	8001818 <HAL_GetTick>
 8002ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ea4:	e00c      	b.n	8002ec0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ea6:	f7fe fcb7 	bl	8001818 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eb4:	d904      	bls.n	8002ec0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <RTC_EnterInitMode+0x64>
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d1e8      	bne.n	8002ea6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ef8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff8b 	bl	8002e24 <HAL_RTC_WaitForSynchro>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d004      	beq.n	8002f1e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2204      	movs	r2, #4
 8002f18:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f85a 	bl	8001008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 f9a0 	bl	80032ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_TIM_PWM_Start+0x24>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e022      	b.n	8003032 <HAL_TIM_PWM_Start+0x6a>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d109      	bne.n	8003006 <HAL_TIM_PWM_Start+0x3e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	e015      	b.n	8003032 <HAL_TIM_PWM_Start+0x6a>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d109      	bne.n	8003020 <HAL_TIM_PWM_Start+0x58>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e008      	b.n	8003032 <HAL_TIM_PWM_Start+0x6a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e068      	b.n	800310c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <HAL_TIM_PWM_Start+0x82>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003048:	e013      	b.n	8003072 <HAL_TIM_PWM_Start+0xaa>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d104      	bne.n	800305a <HAL_TIM_PWM_Start+0x92>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003058:	e00b      	b.n	8003072 <HAL_TIM_PWM_Start+0xaa>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d104      	bne.n	800306a <HAL_TIM_PWM_Start+0xa2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003068:	e003      	b.n	8003072 <HAL_TIM_PWM_Start+0xaa>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2201      	movs	r2, #1
 8003078:	6839      	ldr	r1, [r7, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fb28 	bl	80036d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a23      	ldr	r2, [pc, #140]	@ (8003114 <HAL_TIM_PWM_Start+0x14c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d107      	bne.n	800309a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1d      	ldr	r2, [pc, #116]	@ (8003114 <HAL_TIM_PWM_Start+0x14c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x10e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ac:	d013      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x10e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a19      	ldr	r2, [pc, #100]	@ (8003118 <HAL_TIM_PWM_Start+0x150>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x10e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a17      	ldr	r2, [pc, #92]	@ (800311c <HAL_TIM_PWM_Start+0x154>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x10e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a16      	ldr	r2, [pc, #88]	@ (8003120 <HAL_TIM_PWM_Start+0x158>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x10e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a14      	ldr	r2, [pc, #80]	@ (8003124 <HAL_TIM_PWM_Start+0x15c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d111      	bne.n	80030fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	d010      	beq.n	800310a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f8:	e007      	b.n	800310a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0201 	orr.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40010000 	.word	0x40010000
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800
 8003120:	40000c00 	.word	0x40000c00
 8003124:	40014000 	.word	0x40014000

08003128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003142:	2302      	movs	r3, #2
 8003144:	e0ae      	b.n	80032a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	f200 809f 	bhi.w	8003294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003156:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	08003191 	.word	0x08003191
 8003160:	08003295 	.word	0x08003295
 8003164:	08003295 	.word	0x08003295
 8003168:	08003295 	.word	0x08003295
 800316c:	080031d1 	.word	0x080031d1
 8003170:	08003295 	.word	0x08003295
 8003174:	08003295 	.word	0x08003295
 8003178:	08003295 	.word	0x08003295
 800317c:	08003213 	.word	0x08003213
 8003180:	08003295 	.word	0x08003295
 8003184:	08003295 	.word	0x08003295
 8003188:	08003295 	.word	0x08003295
 800318c:	08003253 	.word	0x08003253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f90e 	bl	80033b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0208 	orr.w	r2, r2, #8
 80031aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6999      	ldr	r1, [r3, #24]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	619a      	str	r2, [r3, #24]
      break;
 80031ce:	e064      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f954 	bl	8003484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6999      	ldr	r1, [r3, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	021a      	lsls	r2, r3, #8
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	619a      	str	r2, [r3, #24]
      break;
 8003210:	e043      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f99f 	bl	800355c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0208 	orr.w	r2, r2, #8
 800322c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0204 	bic.w	r2, r2, #4
 800323c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69d9      	ldr	r1, [r3, #28]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
      break;
 8003250:	e023      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f9e9 	bl	8003630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800326c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800327c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69d9      	ldr	r1, [r3, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	021a      	lsls	r2, r3, #8
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	61da      	str	r2, [r3, #28]
      break;
 8003292:	e002      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
      break;
 8003298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a37      	ldr	r2, [pc, #220]	@ (800339c <TIM_Base_SetConfig+0xf0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00f      	beq.n	80032e4 <TIM_Base_SetConfig+0x38>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0x38>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a34      	ldr	r2, [pc, #208]	@ (80033a0 <TIM_Base_SetConfig+0xf4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0x38>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a33      	ldr	r2, [pc, #204]	@ (80033a4 <TIM_Base_SetConfig+0xf8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0x38>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a32      	ldr	r2, [pc, #200]	@ (80033a8 <TIM_Base_SetConfig+0xfc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a28      	ldr	r2, [pc, #160]	@ (800339c <TIM_Base_SetConfig+0xf0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01b      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003304:	d017      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a25      	ldr	r2, [pc, #148]	@ (80033a0 <TIM_Base_SetConfig+0xf4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a24      	ldr	r2, [pc, #144]	@ (80033a4 <TIM_Base_SetConfig+0xf8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <TIM_Base_SetConfig+0xfc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a22      	ldr	r2, [pc, #136]	@ (80033ac <TIM_Base_SetConfig+0x100>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a21      	ldr	r2, [pc, #132]	@ (80033b0 <TIM_Base_SetConfig+0x104>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a20      	ldr	r2, [pc, #128]	@ (80033b4 <TIM_Base_SetConfig+0x108>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a0c      	ldr	r2, [pc, #48]	@ (800339c <TIM_Base_SetConfig+0xf0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d103      	bne.n	8003376 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f043 0204 	orr.w	r2, r3, #4
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800

080033b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 0201 	bic.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0302 	bic.w	r3, r3, #2
 8003400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <TIM_OC1_SetConfig+0xc8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10c      	bne.n	800342e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0308 	bic.w	r3, r3, #8
 800341a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a13      	ldr	r2, [pc, #76]	@ (8003480 <TIM_OC1_SetConfig+0xc8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d111      	bne.n	800345a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800343c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40010000 	.word	0x40010000

08003484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f023 0210 	bic.w	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 0320 	bic.w	r3, r3, #32
 80034ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a1e      	ldr	r2, [pc, #120]	@ (8003558 <TIM_OC2_SetConfig+0xd4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d10d      	bne.n	8003500 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <TIM_OC2_SetConfig+0xd4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d113      	bne.n	8003530 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800350e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000

0800355c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	@ (800362c <TIM_OC3_SetConfig+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10d      	bne.n	80035d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a14      	ldr	r2, [pc, #80]	@ (800362c <TIM_OC3_SetConfig+0xd0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d113      	bne.n	8003606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40010000 	.word	0x40010000

08003630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800367a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	031b      	lsls	r3, r3, #12
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a10      	ldr	r2, [pc, #64]	@ (80036cc <TIM_OC4_SetConfig+0x9c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d109      	bne.n	80036a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	621a      	str	r2, [r3, #32]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000

080036d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	2201      	movs	r2, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	401a      	ands	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e050      	b.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1c      	ldr	r2, [pc, #112]	@ (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003780:	d013      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a18      	ldr	r2, [pc, #96]	@ (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a15      	ldr	r2, [pc, #84]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a13      	ldr	r2, [pc, #76]	@ (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10c      	bne.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40014000 	.word	0x40014000

080037f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003810:	2302      	movs	r3, #2
 8003812:	e03d      	b.n	8003890 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <memset>:
 800389c:	4402      	add	r2, r0
 800389e:	4603      	mov	r3, r0
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d100      	bne.n	80038a6 <memset+0xa>
 80038a4:	4770      	bx	lr
 80038a6:	f803 1b01 	strb.w	r1, [r3], #1
 80038aa:	e7f9      	b.n	80038a0 <memset+0x4>

080038ac <__libc_init_array>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	4d0d      	ldr	r5, [pc, #52]	@ (80038e4 <__libc_init_array+0x38>)
 80038b0:	4c0d      	ldr	r4, [pc, #52]	@ (80038e8 <__libc_init_array+0x3c>)
 80038b2:	1b64      	subs	r4, r4, r5
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	2600      	movs	r6, #0
 80038b8:	42a6      	cmp	r6, r4
 80038ba:	d109      	bne.n	80038d0 <__libc_init_array+0x24>
 80038bc:	4d0b      	ldr	r5, [pc, #44]	@ (80038ec <__libc_init_array+0x40>)
 80038be:	4c0c      	ldr	r4, [pc, #48]	@ (80038f0 <__libc_init_array+0x44>)
 80038c0:	f000 f818 	bl	80038f4 <_init>
 80038c4:	1b64      	subs	r4, r4, r5
 80038c6:	10a4      	asrs	r4, r4, #2
 80038c8:	2600      	movs	r6, #0
 80038ca:	42a6      	cmp	r6, r4
 80038cc:	d105      	bne.n	80038da <__libc_init_array+0x2e>
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d4:	4798      	blx	r3
 80038d6:	3601      	adds	r6, #1
 80038d8:	e7ee      	b.n	80038b8 <__libc_init_array+0xc>
 80038da:	f855 3b04 	ldr.w	r3, [r5], #4
 80038de:	4798      	blx	r3
 80038e0:	3601      	adds	r6, #1
 80038e2:	e7f2      	b.n	80038ca <__libc_init_array+0x1e>
 80038e4:	0800395c 	.word	0x0800395c
 80038e8:	0800395c 	.word	0x0800395c
 80038ec:	0800395c 	.word	0x0800395c
 80038f0:	08003960 	.word	0x08003960

080038f4 <_init>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	bf00      	nop
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr

08003900 <_fini>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

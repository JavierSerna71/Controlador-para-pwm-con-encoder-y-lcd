
PANTALLA_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004014  08004014  00005014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004090  08004090  00006074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004090  08004090  00005090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004098  08004098  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00005098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800409c  0800409c  0000509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080040a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000074  08004114  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08004114  00006370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bce6  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e64  00000000  00000000  00011d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00013bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097e  00000000  00000000  00014840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e1  00000000  00000000  000151be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e12a  00000000  00000000  0002d59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd09  00000000  00000000  0003b6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d83d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003844  00000000  00000000  000d8418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000dbc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ffc 	.word	0x08003ffc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003ffc 	.word	0x08003ffc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f8a9 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f84f 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fb29 	bl	8000c20 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ce:	f000 f8b9 	bl	8000744 <MX_ADC1_Init>
  MX_RTC_Init();
 80005d2:	f000 f909 	bl	80007e8 <MX_RTC_Init>
  MX_TIM1_Init();
 80005d6:	f000 f92d 	bl	8000834 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005da:	f000 f9d3 	bl	8000984 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005de:	f000 fa4b 	bl	8000a78 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e2:	f000 fac3 	bl	8000b6c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	LCD_Structura LCD = LCD_Create(LCD_Port, LCD_Pin, RS_Port, RS_Pin, EN_Port, EN_Pin);
 80005e6:	4638      	mov	r0, r7
 80005e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005ec:	9302      	str	r3, [sp, #8]
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <main+0x94>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <main+0x94>)
 80005fa:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <main+0x98>)
 80005fc:	4916      	ldr	r1, [pc, #88]	@ (8000658 <main+0x9c>)
 80005fe:	f000 fea0 	bl	8001342 <LCD_Create>
	pintarplantilla(&LCD);
 8000602:	463b      	mov	r3, r7
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f863 	bl	80016d0 <pintarplantilla>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{	LCD_xy(&LCD, 6, 1);
 800060a:	463b      	mov	r3, r7
 800060c:	2201      	movs	r2, #1
 800060e:	2106      	movs	r1, #6
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f80b 	bl	800162c <LCD_xy>
		LCD_cadena(&LCD, "     ");
 8000616:	463b      	mov	r3, r7
 8000618:	4910      	ldr	r1, [pc, #64]	@ (800065c <main+0xa0>)
 800061a:	4618      	mov	r0, r3
 800061c:	f000 ffe7 	bl	80015ee <LCD_cadena>
		LCD_xy(&LCD, 6, 1);
 8000620:	463b      	mov	r3, r7
 8000622:	2201      	movs	r2, #1
 8000624:	2106      	movs	r1, #6
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f800 	bl	800162c <LCD_xy>
		LCD_entero(&LCD,contador);
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <main+0xa4>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	463b      	mov	r3, r7
 8000632:	4611      	mov	r1, r2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 f833 	bl	80016a0 <LCD_entero>
		LCD_cadena(&LCD, "%");
 800063a:	463b      	mov	r3, r7
 800063c:	4909      	ldr	r1, [pc, #36]	@ (8000664 <main+0xa8>)
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ffd5 	bl	80015ee <LCD_cadena>
		HAL_Delay(300);
 8000644:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000648:	f001 f8d8 	bl	80017fc <HAL_Delay>
	{	LCD_xy(&LCD, 6, 1);
 800064c:	bf00      	nop
 800064e:	e7dc      	b.n	800060a <main+0x4e>
 8000650:	40020800 	.word	0x40020800
 8000654:	20000010 	.word	0x20000010
 8000658:	20000000 	.word	0x20000000
 800065c:	08004014 	.word	0x08004014
 8000660:	20000090 	.word	0x20000090
 8000664:	0800401c 	.word	0x0800401c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	@ 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f842 	bl	8003700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <SystemClock_Config+0xd4>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a29      	ldr	r2, [pc, #164]	@ (800073c <SystemClock_Config+0xd4>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <SystemClock_Config+0xd4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemClock_Config+0xd8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b4:	4a22      	ldr	r2, [pc, #136]	@ (8000740 <SystemClock_Config+0xd8>)
 80006b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006c8:	230a      	movs	r3, #10
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e0:	2308      	movs	r3, #8
 80006e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006e4:	2354      	movs	r3, #84	@ 0x54
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fde7 	bl	80022c8 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000700:	f000 fb8e 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000716:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f002 f848 	bl	80027b8 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800072e:	f000 fb77 	bl	8000e20 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	@ 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_ADC1_Init+0x98>)
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <MX_ADC1_Init+0x9c>)
 800075a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_ADC1_Init+0x98>)
 8000784:	4a17      	ldr	r2, [pc, #92]	@ (80007e4 <MX_ADC1_Init+0xa0>)
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_ADC1_Init+0x98>)
 800079e:	2201      	movs	r2, #1
 80007a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a2:	480e      	ldr	r0, [pc, #56]	@ (80007dc <MX_ADC1_Init+0x98>)
 80007a4:	f001 f84e 	bl	8001844 <HAL_ADC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fb37 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007ba:	2307      	movs	r3, #7
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_ADC1_Init+0x98>)
 80007c4:	f001 f882 	bl	80018cc <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ce:	f000 fb27 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000094 	.word	0x20000094
 80007e0:	40012000 	.word	0x40012000
 80007e4:	0f000001 	.word	0x0f000001

080007e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_RTC_Init+0x44>)
 80007ee:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <MX_RTC_Init+0x48>)
 80007f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_RTC_Init+0x44>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_RTC_Init+0x44>)
 80007fa:	227f      	movs	r2, #127	@ 0x7f
 80007fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_RTC_Init+0x44>)
 8000800:	22ff      	movs	r2, #255	@ 0xff
 8000802:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_RTC_Init+0x44>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_RTC_Init+0x44>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_RTC_Init+0x44>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_RTC_Init+0x44>)
 8000818:	f002 fa68 	bl	8002cec <HAL_RTC_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000822:	f000 fafd 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000dc 	.word	0x200000dc
 8000830:	40002800 	.word	0x40002800

08000834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b092      	sub	sp, #72	@ 0x48
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2220      	movs	r2, #32
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f002 ff4e 	bl	8003700 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000864:	4b45      	ldr	r3, [pc, #276]	@ (800097c <MX_TIM1_Init+0x148>)
 8000866:	4a46      	ldr	r2, [pc, #280]	@ (8000980 <MX_TIM1_Init+0x14c>)
 8000868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800086a:	4b44      	ldr	r3, [pc, #272]	@ (800097c <MX_TIM1_Init+0x148>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b42      	ldr	r3, [pc, #264]	@ (800097c <MX_TIM1_Init+0x148>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000876:	4b41      	ldr	r3, [pc, #260]	@ (800097c <MX_TIM1_Init+0x148>)
 8000878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b3f      	ldr	r3, [pc, #252]	@ (800097c <MX_TIM1_Init+0x148>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000884:	4b3d      	ldr	r3, [pc, #244]	@ (800097c <MX_TIM1_Init+0x148>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b3c      	ldr	r3, [pc, #240]	@ (800097c <MX_TIM1_Init+0x148>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000890:	483a      	ldr	r0, [pc, #232]	@ (800097c <MX_TIM1_Init+0x148>)
 8000892:	f002 fb2f 	bl	8002ef4 <HAL_TIM_PWM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800089c:	f000 fac0 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ac:	4619      	mov	r1, r3
 80008ae:	4833      	ldr	r0, [pc, #204]	@ (800097c <MX_TIM1_Init+0x148>)
 80008b0:	f002 fe44 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80008ba:	f000 fab1 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008be:	2360      	movs	r3, #96	@ 0x60
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ca:	2300      	movs	r3, #0
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008de:	2200      	movs	r2, #0
 80008e0:	4619      	mov	r1, r3
 80008e2:	4826      	ldr	r0, [pc, #152]	@ (800097c <MX_TIM1_Init+0x148>)
 80008e4:	f002 fb56 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80008ee:	f000 fa97 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f6:	2204      	movs	r2, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4820      	ldr	r0, [pc, #128]	@ (800097c <MX_TIM1_Init+0x148>)
 80008fc:	f002 fb4a 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000906:	f000 fa8b 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	2208      	movs	r2, #8
 8000910:	4619      	mov	r1, r3
 8000912:	481a      	ldr	r0, [pc, #104]	@ (800097c <MX_TIM1_Init+0x148>)
 8000914:	f002 fb3e 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800091e:	f000 fa7f 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	220c      	movs	r2, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4814      	ldr	r0, [pc, #80]	@ (800097c <MX_TIM1_Init+0x148>)
 800092c:	f002 fb32 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000936:	f000 fa73 	bl	8000e20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800094e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000952:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4807      	ldr	r0, [pc, #28]	@ (800097c <MX_TIM1_Init+0x148>)
 800095e:	f002 fe5b 	bl	8003618 <HAL_TIMEx_ConfigBreakDeadTime>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000968:	f000 fa5a 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800096c:	4803      	ldr	r0, [pc, #12]	@ (800097c <MX_TIM1_Init+0x148>)
 800096e:	f000 fb57 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000972:	bf00      	nop
 8000974:	3748      	adds	r7, #72	@ 0x48
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000fc 	.word	0x200000fc
 8000980:	40010000 	.word	0x40010000

08000984 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a6:	4b33      	ldr	r3, [pc, #204]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 80009a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ae:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009ce:	4829      	ldr	r0, [pc, #164]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 80009d0:	f002 fa90 	bl	8002ef4 <HAL_TIM_PWM_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009da:	f000 fa21 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	4619      	mov	r1, r3
 80009ec:	4821      	ldr	r0, [pc, #132]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 80009ee:	f002 fda5 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009f8:	f000 fa12 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fc:	2360      	movs	r3, #96	@ 0x60
 80009fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4818      	ldr	r0, [pc, #96]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 8000a14:	f002 fabe 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a1e:	f000 f9ff 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2204      	movs	r2, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4812      	ldr	r0, [pc, #72]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 8000a2a:	f002 fab3 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a34:	f000 f9f4 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 8000a40:	f002 faa8 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000a4a:	f000 f9e9 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	220c      	movs	r2, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 8000a56:	f002 fa9d 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000a60:	f000 f9de 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a64:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <MX_TIM2_Init+0xf0>)
 8000a66:	f000 fadb 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	@ 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000144 	.word	0x20000144

08000a78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a9a:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <MX_TIM3_Init+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aa0:	4b30      	ldr	r3, [pc, #192]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aac:	4b2d      	ldr	r3, [pc, #180]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ac0:	4828      	ldr	r0, [pc, #160]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000ac2:	f002 fa17 	bl	8002ef4 <HAL_TIM_PWM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 f9a8 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4619      	mov	r1, r3
 8000ade:	4821      	ldr	r0, [pc, #132]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000ae0:	f002 fd2c 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000aea:	f000 f999 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aee:	2360      	movs	r3, #96	@ 0x60
 8000af0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4817      	ldr	r0, [pc, #92]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000b06:	f002 fa45 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b10:	f000 f986 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2204      	movs	r2, #4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000b1c:	f002 fa3a 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b26:	f000 f97b 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000b32:	f002 fa2f 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000b3c:	f000 f970 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	220c      	movs	r2, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000b48:	f002 fa24 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000b52:	f000 f965 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b56:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <MX_TIM3_Init+0xec>)
 8000b58:	f000 fa62 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000018c 	.word	0x2000018c
 8000b68:	40000400 	.word	0x40000400

08000b6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b8e:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000b90:	4a22      	ldr	r2, [pc, #136]	@ (8000c1c <MX_TIM4_Init+0xb0>)
 8000b92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b94:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bb4:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000bb6:	f002 f99d 	bl	8002ef4 <HAL_TIM_PWM_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f000 f92e 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4811      	ldr	r0, [pc, #68]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000bd4:	f002 fcb2 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000bde:	f000 f91f 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be2:	2360      	movs	r3, #96	@ 0x60
 8000be4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000bfa:	f002 f9cb 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000c04:	f000 f90c 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c08:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <MX_TIM4_Init+0xac>)
 8000c0a:	f000 fa09 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	@ 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001d4 	.word	0x200001d4
 8000c1c:	40000800 	.word	0x40000800

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b43      	ldr	r3, [pc, #268]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a42      	ldr	r2, [pc, #264]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b40      	ldr	r3, [pc, #256]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b39      	ldr	r3, [pc, #228]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b35      	ldr	r3, [pc, #212]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a34      	ldr	r2, [pc, #208]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <MX_GPIO_Init+0x128>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000c90:	482e      	ldr	r0, [pc, #184]	@ (8000d4c <MX_GPIO_Init+0x12c>)
 8000c92:	f001 fae7 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c9c:	482c      	ldr	r0, [pc, #176]	@ (8000d50 <MX_GPIO_Init+0x130>)
 8000c9e:	f001 fae1 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ca2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4824      	ldr	r0, [pc, #144]	@ (8000d4c <MX_GPIO_Init+0x12c>)
 8000cbc:	f001 f936 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	481d      	ldr	r0, [pc, #116]	@ (8000d4c <MX_GPIO_Init+0x12c>)
 8000cd6:	f001 f929 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cda:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4817      	ldr	r0, [pc, #92]	@ (8000d50 <MX_GPIO_Init+0x130>)
 8000cf4:	f001 f91a 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4811      	ldr	r0, [pc, #68]	@ (8000d54 <MX_GPIO_Init+0x134>)
 8000d0e:	f001 f90d 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d18:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	480a      	ldr	r0, [pc, #40]	@ (8000d54 <MX_GPIO_Init+0x134>)
 8000d2a:	f001 f8ff 	bl	8001f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2028      	movs	r0, #40	@ 0x28
 8000d34:	f001 f8c3 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d38:	2028      	movs	r0, #40	@ 0x28
 8000d3a:	f001 f8dc 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40020000 	.word	0x40020000

08000d58 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
volatile uint32_t last_interrupt_time = 0;
const uint32_t debounce_delay = 3;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_15) {
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000d68:	d14e      	bne.n	8000e08 <HAL_GPIO_EXTI_Callback+0xb0>
		uint32_t current_time = HAL_GetTick();
 8000d6a:	f000 fd3b 	bl	80017e4 <HAL_GetTick>
 8000d6e:	6178      	str	r0, [r7, #20]
		if ((current_time - last_interrupt_time) > debounce_delay) {
 8000d70:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2203      	movs	r2, #3
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d944      	bls.n	8000e08 <HAL_GPIO_EXTI_Callback+0xb0>
			EXTI->IMR &= ~(GPIO_PIN_15 | GPIO_PIN_12);
 8000d7e:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a24      	ldr	r2, [pc, #144]	@ (8000e14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d84:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8000d88:	6013      	str	r3, [r2, #0]

			for(volatile int i = 0; i < 100; i++);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_EXTI_Callback+0x3e>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3301      	adds	r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b63      	cmp	r3, #99	@ 0x63
 8000d9a:	ddf9      	ble.n	8000d90 <HAL_GPIO_EXTI_Callback+0x38>
			GPIO_PinState pin12_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8000d9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da0:	481d      	ldr	r0, [pc, #116]	@ (8000e18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000da2:	f001 fa47 	bl	8002234 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	74fb      	strb	r3, [r7, #19]
			GPIO_PinState pin15_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000daa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dae:	481a      	ldr	r0, [pc, #104]	@ (8000e18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000db0:	f001 fa40 	bl	8002234 <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	74bb      	strb	r3, [r7, #18]

			if (pin15_state == GPIO_PIN_RESET) {
 8000db8:	7cbb      	ldrb	r3, [r7, #18]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10d      	bne.n	8000dda <HAL_GPIO_EXTI_Callback+0x82>
				if (pin12_state == GPIO_PIN_SET) {
 8000dbe:	7cfb      	ldrb	r3, [r7, #19]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x78>
					contador--;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e004      	b.n	8000dda <HAL_GPIO_EXTI_Callback+0x82>
				} else {
					contador++;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a11      	ldr	r2, [pc, #68]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000dd8:	6013      	str	r3, [r2, #0]
				}
			}

			if(contador>=100){
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b63      	cmp	r3, #99	@ 0x63
 8000de0:	dd02      	ble.n	8000de8 <HAL_GPIO_EXTI_Callback+0x90>
				contador=100;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000de4:	2264      	movs	r2, #100	@ 0x64
 8000de6:	601a      	str	r2, [r3, #0]
			}
			if(contador<=0){
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc02      	bgt.n	8000df6 <HAL_GPIO_EXTI_Callback+0x9e>
				contador=0;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
			}
			last_interrupt_time = current_time;
 8000df6:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	6013      	str	r3, [r2, #0]
			EXTI->IMR |= (GPIO_PIN_15 | GPIO_PIN_12);
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e02:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
 8000e06:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000021c 	.word	0x2000021c
 8000e14:	40013c00 	.word	0x40013c00
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	20000090 	.word	0x20000090

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <Error_Handler+0x8>

08000e2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_ADC_MspInit+0x7c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d127      	bne.n	8000eee <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_ADC_MspInit+0x80>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_ADC_MspInit+0x84>)
 8000eea:	f001 f81f 	bl	8001f2c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0c      	ldr	r2, [pc, #48]	@ (8000f54 <HAL_RTC_MspInit+0x50>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d111      	bne.n	8000f4a <HAL_RTC_MspInit+0x46>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f26:	2302      	movs	r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f2e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fdeb 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f40:	f7ff ff6e 	bl	8000e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <HAL_RTC_MspInit+0x54>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40002800 	.word	0x40002800
 8000f58:	42470e3c 	.word	0x42470e3c

08000f5c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a29      	ldr	r2, [pc, #164]	@ (8001010 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d10e      	bne.n	8000f8c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	4a27      	ldr	r2, [pc, #156]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7e:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f8a:	e03a      	b.n	8001002 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f94:	d10e      	bne.n	8000fb4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
}
 8000fb2:	e026      	b.n	8001002 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	@ (8001018 <HAL_TIM_PWM_MspInit+0xbc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10e      	bne.n	8000fdc <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a13      	ldr	r2, [pc, #76]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	e012      	b.n	8001002 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_TIM_PWM_MspInit+0xc0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10d      	bne.n	8001002 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <HAL_TIM_PWM_MspInit+0xb8>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40010000 	.word	0x40010000
 8001014:	40023800 	.word	0x40023800
 8001018:	40000400 	.word	0x40000400
 800101c:	40000800 	.word	0x40000800

08001020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	@ 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a66      	ldr	r2, [pc, #408]	@ (80011d8 <HAL_TIM_MspPostInit+0x1b8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d11f      	bne.n	8001082 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	4b65      	ldr	r3, [pc, #404]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a64      	ldr	r2, [pc, #400]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b62      	ldr	r3, [pc, #392]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800105e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001070:	2301      	movs	r3, #1
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	4859      	ldr	r0, [pc, #356]	@ (80011e0 <HAL_TIM_MspPostInit+0x1c0>)
 800107c:	f000 ff56 	bl	8001f2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001080:	e0a6      	b.n	80011d0 <HAL_TIM_MspPostInit+0x1b0>
  else if(htim->Instance==TIM2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800108a:	d13c      	bne.n	8001106 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	4b52      	ldr	r3, [pc, #328]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	4a51      	ldr	r2, [pc, #324]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6313      	str	r3, [r2, #48]	@ 0x30
 800109c:	4b4f      	ldr	r3, [pc, #316]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	4a4a      	ldr	r2, [pc, #296]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b8:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80010c4:	232c      	movs	r3, #44	@ 0x2c
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d4:	2301      	movs	r3, #1
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4840      	ldr	r0, [pc, #256]	@ (80011e0 <HAL_TIM_MspPostInit+0x1c0>)
 80010e0:	f000 ff24 	bl	8001f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010e4:	2308      	movs	r3, #8
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f4:	2301      	movs	r3, #1
 80010f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	4839      	ldr	r0, [pc, #228]	@ (80011e4 <HAL_TIM_MspPostInit+0x1c4>)
 8001100:	f000 ff14 	bl	8001f2c <HAL_GPIO_Init>
}
 8001104:	e064      	b.n	80011d0 <HAL_TIM_MspPostInit+0x1b0>
  else if(htim->Instance==TIM3)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a37      	ldr	r2, [pc, #220]	@ (80011e8 <HAL_TIM_MspPostInit+0x1c8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d13c      	bne.n	800118a <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	4a30      	ldr	r2, [pc, #192]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001120:	4b2e      	ldr	r3, [pc, #184]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4a29      	ldr	r2, [pc, #164]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6313      	str	r3, [r2, #48]	@ 0x30
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001148:	23c0      	movs	r3, #192	@ 0xc0
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001158:	2302      	movs	r3, #2
 800115a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <HAL_TIM_MspPostInit+0x1c0>)
 8001164:	f000 fee2 	bl	8001f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001168:	2303      	movs	r3, #3
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001178:	2302      	movs	r3, #2
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4818      	ldr	r0, [pc, #96]	@ (80011e4 <HAL_TIM_MspPostInit+0x1c4>)
 8001184:	f000 fed2 	bl	8001f2c <HAL_GPIO_Init>
}
 8001188:	e022      	b.n	80011d0 <HAL_TIM_MspPostInit+0x1b0>
  else if(htim->Instance==TIM4)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <HAL_TIM_MspPostInit+0x1cc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d11d      	bne.n	80011d0 <HAL_TIM_MspPostInit+0x1b0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119c:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a4:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_TIM_MspPostInit+0x1bc>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011b0:	2340      	movs	r3, #64	@ 0x40
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011c0:	2302      	movs	r3, #2
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <HAL_TIM_MspPostInit+0x1c4>)
 80011cc:	f000 feae 	bl	8001f2c <HAL_GPIO_Init>
}
 80011d0:	bf00      	nop
 80011d2:	3738      	adds	r7, #56	@ 0x38
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40000800 	.word	0x40000800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <NMI_Handler+0x4>

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <UsageFault_Handler+0x4>

08001218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001246:	f000 fab9 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}

0800124e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001252:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001256:	f001 f81f 	bl	8002298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f002 fa3e 	bl	8003710 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20010000 	.word	0x20010000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	20000220 	.word	0x20000220
 80012c8:	20000370 	.word	0x20000370

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001328 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f4:	f7ff ffea 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131e:	f002 f9fd 	bl	800371c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff f94b 	bl	80005bc <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001334:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 8001338:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800133c:	20000370 	.word	0x20000370

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>

08001342 <LCD_Create>:
LCD_Structura LCD_Create(
		LCD_PortType port[],  LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin
)
{
 8001342:	b5b0      	push	{r4, r5, r7, lr}
 8001344:	b08a      	sub	sp, #40	@ 0x28
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	603b      	str	r3, [r7, #0]
	LCD_Structura LCD;
	LCD.EN_pin   = en_pin;
 8001350:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001354:	84bb      	strh	r3, [r7, #36]	@ 0x24
	LCD.EN_port  = en_port;
 8001356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001358:	623b      	str	r3, [r7, #32]
	LCD.RS_pin   = rs_pin;
 800135a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800135c:	83bb      	strh	r3, [r7, #28]
	LCD.RS_port  = rs_port;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	61bb      	str	r3, [r7, #24]
	LCD.datapin  = pin;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	617b      	str	r3, [r7, #20]
	LCD.dataport = port;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	613b      	str	r3, [r7, #16]


	LCD_Init(&LCD);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f80e 	bl	8001390 <LCD_Init>
	return LCD;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	461d      	mov	r5, r3
 8001378:	f107 0410 	add.w	r4, r7, #16
 800137c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001384:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}

08001390 <LCD_Init>:


void LCD_Init(LCD_Structura *LCD){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8001398:	2064      	movs	r0, #100	@ 0x64
 800139a:	f000 fa2f 	bl	80017fc <HAL_Delay>
	LCD_Command(LCD,0x30);
 800139e:	2130      	movs	r1, #48	@ 0x30
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f822 	bl	80013ea <LCD_Command>
	HAL_Delay(5);
 80013a6:	2005      	movs	r0, #5
 80013a8:	f000 fa28 	bl	80017fc <HAL_Delay>
	LCD_Command(LCD,0x30);
 80013ac:	2130      	movs	r1, #48	@ 0x30
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f81b 	bl	80013ea <LCD_Command>
	HAL_Delay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f000 fa21 	bl	80017fc <HAL_Delay>
	LCD_Command(LCD,0x32);
 80013ba:	2132      	movs	r1, #50	@ 0x32
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f814 	bl	80013ea <LCD_Command>
	LCD_Command(LCD,0x28);
 80013c2:	2128      	movs	r1, #40	@ 0x28
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f810 	bl	80013ea <LCD_Command>
	LCD_Command(LCD,0x0C);
 80013ca:	210c      	movs	r1, #12
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f80c 	bl	80013ea <LCD_Command>
	LCD_Command(LCD,0x01);
 80013d2:	2101      	movs	r1, #1
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f808 	bl	80013ea <LCD_Command>
	LCD_Command(LCD,0x06);
 80013da:	2106      	movs	r1, #6
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f804 	bl	80013ea <LCD_Command>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LCD_Command>:

void LCD_Command(LCD_Structura *LCD, char cmd){
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]

	char comando = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LCD->RS_port, LCD->RS_pin, GPIO_PIN_RESET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	f000 ff2d 	bl	8002264 <HAL_GPIO_WritePin>
	comando = (cmd>>4) & 0x0F;
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	737b      	strb	r3, [r7, #13]
	for(uint8_t i=0; i<4; i++){
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e019      	b.n	800144a <LCD_Command+0x60>

		HAL_GPIO_WritePin(LCD->dataport[i], LCD->datapin[i], (comando>>i) & 0x01);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	8819      	ldrh	r1, [r3, #0]
 800142e:	7b7a      	ldrb	r2, [r7, #13]
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	fa42 f303 	asr.w	r3, r2, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	f000 ff10 	bl	8002264 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++){
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	3301      	adds	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d9e2      	bls.n	8001416 <LCD_Command+0x2c>
	}
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_SET);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6918      	ldr	r0, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	8a9b      	ldrh	r3, [r3, #20]
 8001458:	2201      	movs	r2, #1
 800145a:	4619      	mov	r1, r3
 800145c:	f000 ff02 	bl	8002264 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f000 f9cb 	bl	80017fc <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_RESET);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6918      	ldr	r0, [r3, #16]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	8a9b      	ldrh	r3, [r3, #20]
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	f000 fef7 	bl	8002264 <HAL_GPIO_WritePin>

	comando = cmd & 0x0F;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	737b      	strb	r3, [r7, #13]
	for(uint8_t i=0; i<4; i++){
 800147e:	2300      	movs	r3, #0
 8001480:	73bb      	strb	r3, [r7, #14]
 8001482:	e019      	b.n	80014b8 <LCD_Command+0xce>
		HAL_GPIO_WritePin(LCD->dataport[i], LCD->datapin[i], (comando>>i) & 0x01);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	8819      	ldrh	r1, [r3, #0]
 800149c:	7b7a      	ldrb	r2, [r7, #13]
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	fa42 f303 	asr.w	r3, r2, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	f000 fed9 	bl	8002264 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++){
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	3301      	adds	r3, #1
 80014b6:	73bb      	strb	r3, [r7, #14]
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d9e2      	bls.n	8001484 <LCD_Command+0x9a>
	}
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_SET);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6918      	ldr	r0, [r3, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	8a9b      	ldrh	r3, [r3, #20]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	f000 fecb 	bl	8002264 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 f994 	bl	80017fc <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_RESET);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6918      	ldr	r0, [r3, #16]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	8a9b      	ldrh	r3, [r3, #20]
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	f000 fec0 	bl	8002264 <HAL_GPIO_WritePin>

}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <LCD_texto>:

void LCD_texto(LCD_Structura *LCD,char data){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]

	char datos = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LCD->RS_port, LCD->RS_pin, GPIO_PIN_SET);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6898      	ldr	r0, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	899b      	ldrh	r3, [r3, #12]
 8001504:	2201      	movs	r2, #1
 8001506:	4619      	mov	r1, r3
 8001508:	f000 feac 	bl	8002264 <HAL_GPIO_WritePin>
	datos = (data>>4) & 0x0F;
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	737b      	strb	r3, [r7, #13]
	for(uint8_t i=0; i<4; i++){
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e019      	b.n	800154c <LCD_texto+0x60>

		HAL_GPIO_WritePin(LCD->dataport[i], LCD->datapin[i], (datos>>i) & 0x01);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	8819      	ldrh	r1, [r3, #0]
 8001530:	7b7a      	ldrb	r2, [r7, #13]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	fa42 f303 	asr.w	r3, r2, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	f000 fe8f 	bl	8002264 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++){
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	3301      	adds	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d9e2      	bls.n	8001518 <LCD_texto+0x2c>
	}
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_SET);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6918      	ldr	r0, [r3, #16]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	8a9b      	ldrh	r3, [r3, #20]
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	f000 fe81 	bl	8002264 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 f94a 	bl	80017fc <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_RESET);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6918      	ldr	r0, [r3, #16]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	8a9b      	ldrh	r3, [r3, #20]
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	f000 fe76 	bl	8002264 <HAL_GPIO_WritePin>

	datos = data & 0x0F;
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	737b      	strb	r3, [r7, #13]
	for(uint8_t i=0; i<4; i++){
 8001580:	2300      	movs	r3, #0
 8001582:	73bb      	strb	r3, [r7, #14]
 8001584:	e019      	b.n	80015ba <LCD_texto+0xce>
		HAL_GPIO_WritePin(LCD->dataport[i], LCD->datapin[i], (datos>>i) & 0x01);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	7bbb      	ldrb	r3, [r7, #14]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	8819      	ldrh	r1, [r3, #0]
 800159e:	7b7a      	ldrb	r2, [r7, #13]
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	fa42 f303 	asr.w	r3, r2, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	f000 fe58 	bl	8002264 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<4; i++){
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73bb      	strb	r3, [r7, #14]
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d9e2      	bls.n	8001586 <LCD_texto+0x9a>
	}
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_SET);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6918      	ldr	r0, [r3, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	8a9b      	ldrh	r3, [r3, #20]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4619      	mov	r1, r3
 80015cc:	f000 fe4a 	bl	8002264 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 f913 	bl	80017fc <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EN_port, LCD->EN_pin,GPIO_PIN_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6918      	ldr	r0, [r3, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8a9b      	ldrh	r3, [r3, #20]
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f000 fe3f 	bl	8002264 <HAL_GPIO_WritePin>

}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <LCD_cadena>:

void LCD_cadena(LCD_Structura *LCD,char *cadena){
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
	for(uint8_t i=0; i <strlen(cadena); i++){
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e00a      	b.n	8001614 <LCD_cadena+0x26>
		LCD_texto(LCD, cadena[i]);
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff6f 	bl	80014ec <LCD_texto>
	for(uint8_t i=0; i <strlen(cadena); i++){
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	3301      	adds	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfc      	ldrb	r4, [r7, #15]
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f7fe fde2 	bl	80001e0 <strlen>
 800161c:	4603      	mov	r3, r0
 800161e:	429c      	cmp	r4, r3
 8001620:	d3ed      	bcc.n	80015fe <LCD_cadena+0x10>
	}
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}

0800162c <LCD_xy>:

void LCD_xy(LCD_Structura *LCD, char x, char y){
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
 8001638:	4613      	mov	r3, r2
 800163a:	70bb      	strb	r3, [r7, #2]
	if(y>0){
 800163c:	78bb      	ldrb	r3, [r7, #2]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <LCD_xy+0x26>
		LCD_Command(LCD,0xC0 + x );
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	3b40      	subs	r3, #64	@ 0x40
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fecd 	bl	80013ea <LCD_Command>
	}
	else{
		LCD_Command(LCD,0x80 + x );
	}
}
 8001650:	e006      	b.n	8001660 <LCD_xy+0x34>
		LCD_Command(LCD,0x80 + x );
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	3b80      	subs	r3, #128	@ 0x80
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fec5 	bl	80013ea <LCD_Command>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <LCD_clear>:

void LCD_clear(LCD_Structura *LCD){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	LCD_xy(LCD, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffd9 	bl	800162c <LCD_xy>
	LCD_cadena(LCD, "                ");
 800167a:	4908      	ldr	r1, [pc, #32]	@ (800169c <LCD_clear+0x34>)
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ffb6 	bl	80015ee <LCD_cadena>
	LCD_xy(LCD, 0, 1);
 8001682:	2201      	movs	r2, #1
 8001684:	2100      	movs	r1, #0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffd0 	bl	800162c <LCD_xy>
	LCD_cadena(LCD, "                ");
 800168c:	4903      	ldr	r1, [pc, #12]	@ (800169c <LCD_clear+0x34>)
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffad 	bl	80015ee <LCD_cadena>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	08004020 	.word	0x08004020

080016a0 <LCD_entero>:


void LCD_entero(LCD_Structura *LCD, int numero) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
    char buffer[12];
    sprintf(buffer, "%d", numero);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	4906      	ldr	r1, [pc, #24]	@ (80016cc <LCD_entero+0x2c>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 f802 	bl	80036bc <siprintf>
    LCD_cadena(LCD, buffer);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff95 	bl	80015ee <LCD_cadena>
}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	08004034 	.word	0x08004034

080016d0 <pintarplantilla>:


void pintarplantilla(LCD_Structura *LCD){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	LCD_clear(LCD);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ffc5 	bl	8001668 <LCD_clear>
	LCD_xy(LCD, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <LCD_xy>
	LCD_cadena(LCD,"Frecuencia:");
 80016e8:	4909      	ldr	r1, [pc, #36]	@ (8001710 <pintarplantilla+0x40>)
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff7f 	bl	80015ee <LCD_cadena>
	LCD_xy(LCD, 0, 1);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2100      	movs	r1, #0
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff99 	bl	800162c <LCD_xy>
	LCD_cadena(LCD,"Dutty:");
 80016fa:	4906      	ldr	r1, [pc, #24]	@ (8001714 <pintarplantilla+0x44>)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff76 	bl	80015ee <LCD_cadena>
	HAL_Delay(200);
 8001702:	20c8      	movs	r0, #200	@ 0xc8
 8001704:	f000 f87a 	bl	80017fc <HAL_Delay>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08004038 	.word	0x08004038
 8001714:	08004044 	.word	0x08004044

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 fbb1 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	200f      	movs	r0, #15
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fb6e 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fbc9 	bl	8001f12 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001798:	f000 fb91 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000018 	.word	0x20000018
 80017b4:	20000020 	.word	0x20000020
 80017b8:	2000001c 	.word	0x2000001c

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000224 	.word	0x20000224

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000224 	.word	0x20000224

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000020 	.word	0x20000020

08001844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e033      	b.n	80018c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fb0a 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800188a:	f023 0302 	bic.w	r3, r3, #2
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f93a 	bl	8001b10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80018b2:	e001      	b.n	80018b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1c>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e105      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x228>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d925      	bls.n	8001944 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68d9      	ldr	r1, [r3, #12]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	3b1e      	subs	r3, #30
 800190e:	2207      	movs	r2, #7
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43da      	mvns	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	400a      	ands	r2, r1
 800191c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68d9      	ldr	r1, [r3, #12]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	4603      	mov	r3, r0
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4403      	add	r3, r0
 8001936:	3b1e      	subs	r3, #30
 8001938:	409a      	lsls	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	e022      	b.n	800198a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6919      	ldr	r1, [r3, #16]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	2207      	movs	r2, #7
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6919      	ldr	r1, [r3, #16]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	4603      	mov	r3, r0
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4403      	add	r3, r0
 8001980:	409a      	lsls	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d824      	bhi.n	80019dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b05      	subs	r3, #5
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3b05      	subs	r3, #5
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80019da:	e04c      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d824      	bhi.n	8001a2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	@ 0x23
 80019f6:	221f      	movs	r2, #31
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43da      	mvns	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	400a      	ands	r2, r1
 8001a04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b23      	subs	r3, #35	@ 0x23
 8001a20:	fa00 f203 	lsl.w	r2, r0, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a2c:	e023      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b41      	subs	r3, #65	@ 0x41
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b41      	subs	r3, #65	@ 0x41
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <HAL_ADC_ConfigChannel+0x234>)
 8001a78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a21      	ldr	r2, [pc, #132]	@ (8001b04 <HAL_ADC_ConfigChannel+0x238>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d109      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b12      	cmp	r3, #18
 8001a8a:	d105      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_ADC_ConfigChannel+0x238>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d123      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d003      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x1e6>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b11      	cmp	r3, #17
 8001ab0:	d11b      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d111      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <HAL_ADC_ConfigChannel+0x23c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a10      	ldr	r2, [pc, #64]	@ (8001b0c <HAL_ADC_ConfigChannel+0x240>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9a      	lsrs	r2, r3, #18
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001adc:	e002      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40012300 	.word	0x40012300
 8001b04:	40012000 	.word	0x40012000
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b18:	4b79      	ldr	r3, [pc, #484]	@ (8001d00 <ADC_Init+0x1f0>)
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	021a      	lsls	r2, r3, #8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6899      	ldr	r1, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba2:	4a58      	ldr	r2, [pc, #352]	@ (8001d04 <ADC_Init+0x1f4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d022      	beq.n	8001bee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6899      	ldr	r1, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	e00f      	b.n	8001c0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0202 	bic.w	r2, r2, #2
 8001c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6899      	ldr	r1, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7e1b      	ldrb	r3, [r3, #24]
 8001c28:	005a      	lsls	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	3b01      	subs	r3, #1
 8001c68:	035a      	lsls	r2, r3, #13
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	e007      	b.n	8001c84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	051a      	lsls	r2, r3, #20
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6899      	ldr	r1, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cc6:	025a      	lsls	r2, r3, #9
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6899      	ldr	r1, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	029a      	lsls	r2, r3, #10
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	609a      	str	r2, [r3, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40012300 	.word	0x40012300
 8001d04:	0f000001 	.word	0x0f000001

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	@ (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	@ (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	@ (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff3e 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff8e 	bl	8001dfc <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff31 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e159      	b.n	80021fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 8148 	bne.w	80021f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d130      	bne.n	8001fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0201 	and.w	r2, r3, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d017      	beq.n	800201c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d123      	bne.n	8002070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a2 	beq.w	80021f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b57      	ldr	r3, [pc, #348]	@ (8002214 <HAL_GPIO_Init+0x2e8>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a56      	ldr	r2, [pc, #344]	@ (8002214 <HAL_GPIO_Init+0x2e8>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b54      	ldr	r3, [pc, #336]	@ (8002214 <HAL_GPIO_Init+0x2e8>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ce:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <HAL_GPIO_Init+0x2ec>)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a49      	ldr	r2, [pc, #292]	@ (800221c <HAL_GPIO_Init+0x2f0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x202>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a48      	ldr	r2, [pc, #288]	@ (8002220 <HAL_GPIO_Init+0x2f4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x1fe>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a47      	ldr	r2, [pc, #284]	@ (8002224 <HAL_GPIO_Init+0x2f8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x1fa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a46      	ldr	r2, [pc, #280]	@ (8002228 <HAL_GPIO_Init+0x2fc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x1f6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a45      	ldr	r2, [pc, #276]	@ (800222c <HAL_GPIO_Init+0x300>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x1f2>
 800211a:	2304      	movs	r3, #4
 800211c:	e008      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800211e:	2307      	movs	r3, #7
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x204>
 8002122:	2303      	movs	r3, #3
 8002124:	e004      	b.n	8002130 <HAL_GPIO_Init+0x204>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800212e:	2300      	movs	r3, #0
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002140:	4935      	ldr	r1, [pc, #212]	@ (8002218 <HAL_GPIO_Init+0x2ec>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <HAL_GPIO_Init+0x304>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002172:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <HAL_GPIO_Init+0x304>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <HAL_GPIO_Init+0x304>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800219c:	4a24      	ldr	r2, [pc, #144]	@ (8002230 <HAL_GPIO_Init+0x304>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a2:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_GPIO_Init+0x304>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_GPIO_Init+0x304>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_GPIO_Init+0x304>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002230 <HAL_GPIO_Init+0x304>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3301      	adds	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b0f      	cmp	r3, #15
 8002200:	f67f aea2 	bls.w	8001f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40013800 	.word	0x40013800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40020800 	.word	0x40020800
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40021000 	.word	0x40021000
 8002230:	40013c00 	.word	0x40013c00

08002234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e001      	b.n	8002256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022a2:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ae:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fd4e 	bl	8000d58 <HAL_GPIO_EXTI_Callback>
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e267      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d075      	beq.n	80023d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022e6:	4b88      	ldr	r3, [pc, #544]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d00c      	beq.n	800230c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4b85      	ldr	r3, [pc, #532]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d112      	bne.n	8002324 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b82      	ldr	r3, [pc, #520]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002306:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800230a:	d10b      	bne.n	8002324 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	4b7e      	ldr	r3, [pc, #504]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d05b      	beq.n	80023d0 <HAL_RCC_OscConfig+0x108>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d157      	bne.n	80023d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e242      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800232c:	d106      	bne.n	800233c <HAL_RCC_OscConfig+0x74>
 800232e:	4b76      	ldr	r3, [pc, #472]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a75      	ldr	r2, [pc, #468]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e01d      	b.n	8002378 <HAL_RCC_OscConfig+0xb0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x98>
 8002346:	4b70      	ldr	r3, [pc, #448]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6f      	ldr	r2, [pc, #444]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b6d      	ldr	r3, [pc, #436]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6c      	ldr	r2, [pc, #432]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0xb0>
 8002360:	4b69      	ldr	r3, [pc, #420]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a68      	ldr	r2, [pc, #416]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b66      	ldr	r3, [pc, #408]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a65      	ldr	r2, [pc, #404]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff fa30 	bl	80017e4 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002388:	f7ff fa2c 	bl	80017e4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	@ 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e207      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b5b      	ldr	r3, [pc, #364]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0xc0>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fa1c 	bl	80017e4 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b0:	f7ff fa18 	bl	80017e4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e1f3      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	4b51      	ldr	r3, [pc, #324]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0xe8>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d063      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023de:	4b4a      	ldr	r3, [pc, #296]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d11c      	bne.n	8002430 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x152>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e1c7      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4937      	ldr	r1, [pc, #220]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	e03a      	b.n	80024a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002438:	4b34      	ldr	r3, [pc, #208]	@ (800250c <HAL_RCC_OscConfig+0x244>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f9d1 	bl	80017e4 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002446:	f7ff f9cd 	bl	80017e4 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1a8      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4925      	ldr	r1, [pc, #148]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247a:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_OscConfig+0x244>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff f9b0 	bl	80017e4 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002488:	f7ff f9ac 	bl	80017e4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e187      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d036      	beq.n	8002520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_RCC_OscConfig+0x248>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff f990 	bl	80017e4 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff f98c 	bl	80017e4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e167      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x200>
 80024e6:	e01b      	b.n	8002520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_OscConfig+0x248>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7ff f979 	bl	80017e4 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	e00e      	b.n	8002514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f6:	f7ff f975 	bl	80017e4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d907      	bls.n	8002514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e150      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
 8002508:	40023800 	.word	0x40023800
 800250c:	42470000 	.word	0x42470000
 8002510:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	4b88      	ldr	r3, [pc, #544]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ea      	bne.n	80024f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8097 	beq.w	800265c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4b81      	ldr	r3, [pc, #516]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b7d      	ldr	r3, [pc, #500]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a7c      	ldr	r2, [pc, #496]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b7a      	ldr	r3, [pc, #488]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b77      	ldr	r3, [pc, #476]	@ (800273c <HAL_RCC_OscConfig+0x474>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b74      	ldr	r3, [pc, #464]	@ (800273c <HAL_RCC_OscConfig+0x474>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a73      	ldr	r2, [pc, #460]	@ (800273c <HAL_RCC_OscConfig+0x474>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7ff f935 	bl	80017e4 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7ff f931 	bl	80017e4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e10c      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	4b6a      	ldr	r3, [pc, #424]	@ (800273c <HAL_RCC_OscConfig+0x474>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2ea>
 80025a4:	4b64      	ldr	r3, [pc, #400]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a63      	ldr	r2, [pc, #396]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	e01c      	b.n	80025ec <HAL_RCC_OscConfig+0x324>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x30c>
 80025ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	4a5e      	ldr	r2, [pc, #376]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0x324>
 80025d4:	4b58      	ldr	r3, [pc, #352]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	4a57      	ldr	r2, [pc, #348]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e0:	4b55      	ldr	r3, [pc, #340]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4a54      	ldr	r2, [pc, #336]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d015      	beq.n	8002620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff f8f6 	bl	80017e4 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7ff f8f2 	bl	80017e4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0cb      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	4b49      	ldr	r3, [pc, #292]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ee      	beq.n	80025fc <HAL_RCC_OscConfig+0x334>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7ff f8e0 	bl	80017e4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7ff f8dc 	bl	80017e4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0b5      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	4b3e      	ldr	r3, [pc, #248]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ee      	bne.n	8002628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002650:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	4a38      	ldr	r2, [pc, #224]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a1 	beq.w	80027a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002666:	4b34      	ldr	r3, [pc, #208]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b08      	cmp	r3, #8
 8002670:	d05c      	beq.n	800272c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d141      	bne.n	80026fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <HAL_RCC_OscConfig+0x478>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff f8b0 	bl	80017e4 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff f8ac 	bl	80017e4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e087      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	019b      	lsls	r3, r3, #6
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	3b01      	subs	r3, #1
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	061b      	lsls	r3, r3, #24
 80026ca:	491b      	ldr	r1, [pc, #108]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <HAL_RCC_OscConfig+0x478>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff f885 	bl	80017e4 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7ff f881 	bl	80017e4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e05c      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x416>
 80026fc:	e054      	b.n	80027a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_RCC_OscConfig+0x478>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff f86e 	bl	80017e4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7ff f86a 	bl	80017e4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e045      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x444>
 800272a:	e03d      	b.n	80027a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e038      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
 8002738:	40023800 	.word	0x40023800
 800273c:	40007000 	.word	0x40007000
 8002740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <HAL_RCC_OscConfig+0x4ec>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d028      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d121      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d11a      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800277a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0cc      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b68      	ldr	r3, [pc, #416]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d90c      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b65      	ldr	r3, [pc, #404]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800282e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d044      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d119      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b3f      	ldr	r3, [pc, #252]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3b      	ldr	r3, [pc, #236]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e067      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b37      	ldr	r3, [pc, #220]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4934      	ldr	r1, [pc, #208]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7fe ff9c 	bl	80017e4 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7fe ff98 	bl	80017e4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e04f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d20c      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292a:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	@ (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	@ (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fefc 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	0800404c 	.word	0x0800404c
 800297c:	20000018 	.word	0x20000018
 8002980:	2000001c 	.word	0x2000001c

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002988:	b090      	sub	sp, #64	@ 0x40
 800298a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299c:	4b59      	ldr	r3, [pc, #356]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d00d      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x40>
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	f200 80a1 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x16c>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x34>
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x3a>
 80029b6:	e09b      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029bc:	e09b      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029be:	4b53      	ldr	r3, [pc, #332]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80029c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029c2:	e098      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d028      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b4a      	ldr	r3, [pc, #296]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	2200      	movs	r2, #0
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029ec:	2100      	movs	r1, #0
 80029ee:	4b47      	ldr	r3, [pc, #284]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80029f0:	fb03 f201 	mul.w	r2, r3, r1
 80029f4:	2300      	movs	r3, #0
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	4a43      	ldr	r2, [pc, #268]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80029fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a04:	460a      	mov	r2, r1
 8002a06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a0a:	4413      	add	r3, r2
 8002a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a10:	2200      	movs	r2, #0
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	61fa      	str	r2, [r7, #28]
 8002a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a1e:	f7fd fc37 	bl	8000290 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4613      	mov	r3, r2
 8002a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a2a:	e053      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2c:	4b35      	ldr	r3, [pc, #212]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	2200      	movs	r2, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	617a      	str	r2, [r7, #20]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a3e:	f04f 0b00 	mov.w	fp, #0
 8002a42:	4652      	mov	r2, sl
 8002a44:	465b      	mov	r3, fp
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a54:	0150      	lsls	r0, r2, #5
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a76:	ebb2 0408 	subs.w	r4, r2, r8
 8002a7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	00eb      	lsls	r3, r5, #3
 8002a88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a8c:	00e2      	lsls	r2, r4, #3
 8002a8e:	4614      	mov	r4, r2
 8002a90:	461d      	mov	r5, r3
 8002a92:	eb14 030a 	adds.w	r3, r4, sl
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	eb45 030b 	adc.w	r3, r5, fp
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aaa:	4629      	mov	r1, r5
 8002aac:	028b      	lsls	r3, r1, #10
 8002aae:	4621      	mov	r1, r4
 8002ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	028a      	lsls	r2, r1, #10
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	60fa      	str	r2, [r7, #12]
 8002ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ac8:	f7fd fbe2 	bl	8000290 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ae4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3740      	adds	r7, #64	@ 0x40
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	017d7840 	.word	0x017d7840

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d035      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b38:	4b67      	ldr	r3, [pc, #412]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe fe51 	bl	80017e4 <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b46:	f7fe fe4d 	bl	80017e4 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0ba      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b58:	4b60      	ldr	r3, [pc, #384]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	019a      	lsls	r2, r3, #6
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	071b      	lsls	r3, r3, #28
 8002b70:	495a      	ldr	r1, [pc, #360]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b78:	4b57      	ldr	r3, [pc, #348]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b7e:	f7fe fe31 	bl	80017e4 <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b86:	f7fe fe2d 	bl	80017e4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e09a      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b98:	4b50      	ldr	r3, [pc, #320]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8083 	beq.w	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b49      	ldr	r3, [pc, #292]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	4a48      	ldr	r2, [pc, #288]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc2:	4b46      	ldr	r3, [pc, #280]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bce:	4b44      	ldr	r3, [pc, #272]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a43      	ldr	r2, [pc, #268]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bda:	f7fe fe03 	bl	80017e4 <HAL_GetTick>
 8002bde:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be2:	f7fe fdff 	bl	80017e4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e06c      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c08:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d02f      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d028      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c28:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c34:	4a29      	ldr	r2, [pc, #164]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c3a:	4b28      	ldr	r3, [pc, #160]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d114      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fe fdcd 	bl	80017e4 <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe fdc9 	bl	80017e4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e034      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ee      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c7c:	d10d      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002c7e:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c92:	4912      	ldr	r1, [pc, #72]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]
 8002c98:	e005      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ca0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ca4:	6093      	str	r3, [r2, #8]
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ca8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb2:	490a      	ldr	r1, [pc, #40]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7c1a      	ldrb	r2, [r3, #16]
 8002cc8:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cca:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	42470068 	.word	0x42470068
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	42470e40 	.word	0x42470e40
 8002ce8:	424711e0 	.word	0x424711e0

08002cec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e073      	b.n	8002de6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	7f5b      	ldrb	r3, [r3, #29]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe f8f8 	bl	8000f04 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d055      	beq.n	8002dd4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	22ca      	movs	r2, #202	@ 0xca
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2253      	movs	r2, #83	@ 0x53
 8002d36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f87f 	bl	8002e3c <RTC_EnterInitMode>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d12c      	bne.n	8002da2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d5a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6919      	ldr	r1, [r3, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	041a      	lsls	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f886 	bl	8002eaa <RTC_ExitInitMode>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d110      	bne.n	8002dca <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	22ff      	movs	r2, #255	@ 0xff
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dd2:	e001      	b.n	8002dd8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0d      	ldr	r2, [pc, #52]	@ (8002e38 <HAL_RTC_WaitForSynchro+0x48>)
 8002e02:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e04:	f7fe fcee 	bl	80017e4 <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e0a:	e009      	b.n	8002e20 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e0c:	f7fe fcea 	bl	80017e4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e1a:	d901      	bls.n	8002e20 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e007      	b.n	8002e30 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ee      	beq.n	8002e0c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00013f5f 	.word	0x00013f5f

08002e3c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d122      	bne.n	8002ea0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e68:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fcbb 	bl	80017e4 <HAL_GetTick>
 8002e6e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e70:	e00c      	b.n	8002e8c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e72:	f7fe fcb7 	bl	80017e4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e80:	d904      	bls.n	8002e8c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2204      	movs	r2, #4
 8002e86:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <RTC_EnterInitMode+0x64>
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d1e8      	bne.n	8002e72 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ec4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff8b 	bl	8002df0 <HAL_RTC_WaitForSynchro>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e041      	b.n	8002f8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe f81e 	bl	8000f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f000 f8f0 	bl	8003118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e0ae      	b.n	8003110 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	f200 809f 	bhi.w	8003100 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	08003101 	.word	0x08003101
 8002fd0:	08003101 	.word	0x08003101
 8002fd4:	08003101 	.word	0x08003101
 8002fd8:	0800303d 	.word	0x0800303d
 8002fdc:	08003101 	.word	0x08003101
 8002fe0:	08003101 	.word	0x08003101
 8002fe4:	08003101 	.word	0x08003101
 8002fe8:	0800307f 	.word	0x0800307f
 8002fec:	08003101 	.word	0x08003101
 8002ff0:	08003101 	.word	0x08003101
 8002ff4:	08003101 	.word	0x08003101
 8002ff8:	080030bf 	.word	0x080030bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f90e 	bl	8003224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0208 	orr.w	r2, r2, #8
 8003016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0204 	bic.w	r2, r2, #4
 8003026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6999      	ldr	r1, [r3, #24]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	619a      	str	r2, [r3, #24]
      break;
 800303a:	e064      	b.n	8003106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f954 	bl	80032f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6999      	ldr	r1, [r3, #24]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	021a      	lsls	r2, r3, #8
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	619a      	str	r2, [r3, #24]
      break;
 800307c:	e043      	b.n	8003106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 f99f 	bl	80033c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0208 	orr.w	r2, r2, #8
 8003098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0204 	bic.w	r2, r2, #4
 80030a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69d9      	ldr	r1, [r3, #28]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	61da      	str	r2, [r3, #28]
      break;
 80030bc:	e023      	b.n	8003106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f9e9 	bl	800349c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69d9      	ldr	r1, [r3, #28]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	021a      	lsls	r2, r3, #8
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	61da      	str	r2, [r3, #28]
      break;
 80030fe:	e002      	b.n	8003106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	75fb      	strb	r3, [r7, #23]
      break;
 8003104:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800310e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a37      	ldr	r2, [pc, #220]	@ (8003208 <TIM_Base_SetConfig+0xf0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00f      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003136:	d00b      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a34      	ldr	r2, [pc, #208]	@ (800320c <TIM_Base_SetConfig+0xf4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a33      	ldr	r2, [pc, #204]	@ (8003210 <TIM_Base_SetConfig+0xf8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a32      	ldr	r2, [pc, #200]	@ (8003214 <TIM_Base_SetConfig+0xfc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d108      	bne.n	8003162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a28      	ldr	r2, [pc, #160]	@ (8003208 <TIM_Base_SetConfig+0xf0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01b      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d017      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a25      	ldr	r2, [pc, #148]	@ (800320c <TIM_Base_SetConfig+0xf4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a24      	ldr	r2, [pc, #144]	@ (8003210 <TIM_Base_SetConfig+0xf8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a23      	ldr	r2, [pc, #140]	@ (8003214 <TIM_Base_SetConfig+0xfc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a22      	ldr	r2, [pc, #136]	@ (8003218 <TIM_Base_SetConfig+0x100>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a21      	ldr	r2, [pc, #132]	@ (800321c <TIM_Base_SetConfig+0x104>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a20      	ldr	r2, [pc, #128]	@ (8003220 <TIM_Base_SetConfig+0x108>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003208 <TIM_Base_SetConfig+0xf0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d103      	bne.n	80031e2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f043 0204 	orr.w	r2, r3, #4
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	601a      	str	r2, [r3, #0]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800

08003224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f023 0201 	bic.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 0302 	bic.w	r3, r3, #2
 800326c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1c      	ldr	r2, [pc, #112]	@ (80032ec <TIM_OC1_SetConfig+0xc8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10c      	bne.n	800329a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0308 	bic.w	r3, r3, #8
 8003286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a13      	ldr	r2, [pc, #76]	@ (80032ec <TIM_OC1_SetConfig+0xc8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d111      	bne.n	80032c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	621a      	str	r2, [r3, #32]
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40010000 	.word	0x40010000

080032f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f023 0210 	bic.w	r2, r3, #16
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0320 	bic.w	r3, r3, #32
 800333a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a1e      	ldr	r2, [pc, #120]	@ (80033c4 <TIM_OC2_SetConfig+0xd4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d10d      	bne.n	800336c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800336a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a15      	ldr	r2, [pc, #84]	@ (80033c4 <TIM_OC2_SetConfig+0xd4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d113      	bne.n	800339c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800337a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40010000 	.word	0x40010000

080033c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1d      	ldr	r2, [pc, #116]	@ (8003498 <TIM_OC3_SetConfig+0xd0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d10d      	bne.n	8003442 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800342c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a14      	ldr	r2, [pc, #80]	@ (8003498 <TIM_OC3_SetConfig+0xd0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d113      	bne.n	8003472 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	621a      	str	r2, [r3, #32]
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40010000 	.word	0x40010000

0800349c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	031b      	lsls	r3, r3, #12
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a10      	ldr	r2, [pc, #64]	@ (8003538 <TIM_OC4_SetConfig+0x9c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d109      	bne.n	8003510 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	019b      	lsls	r3, r3, #6
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000

0800353c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e050      	b.n	80035f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1c      	ldr	r2, [pc, #112]	@ (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a0:	d013      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a18      	ldr	r2, [pc, #96]	@ (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a16      	ldr	r2, [pc, #88]	@ (800360c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a15      	ldr	r2, [pc, #84]	@ (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a13      	ldr	r2, [pc, #76]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10c      	bne.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40014000 	.word	0x40014000

08003618 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003630:	2302      	movs	r3, #2
 8003632:	e03d      	b.n	80036b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <siprintf>:
 80036bc:	b40e      	push	{r1, r2, r3}
 80036be:	b510      	push	{r4, lr}
 80036c0:	b09d      	sub	sp, #116	@ 0x74
 80036c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80036c4:	9002      	str	r0, [sp, #8]
 80036c6:	9006      	str	r0, [sp, #24]
 80036c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80036cc:	480a      	ldr	r0, [pc, #40]	@ (80036f8 <siprintf+0x3c>)
 80036ce:	9107      	str	r1, [sp, #28]
 80036d0:	9104      	str	r1, [sp, #16]
 80036d2:	490a      	ldr	r1, [pc, #40]	@ (80036fc <siprintf+0x40>)
 80036d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036d8:	9105      	str	r1, [sp, #20]
 80036da:	2400      	movs	r4, #0
 80036dc:	a902      	add	r1, sp, #8
 80036de:	6800      	ldr	r0, [r0, #0]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80036e4:	f000 f994 	bl	8003a10 <_svfiprintf_r>
 80036e8:	9b02      	ldr	r3, [sp, #8]
 80036ea:	701c      	strb	r4, [r3, #0]
 80036ec:	b01d      	add	sp, #116	@ 0x74
 80036ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f2:	b003      	add	sp, #12
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000024 	.word	0x20000024
 80036fc:	ffff0208 	.word	0xffff0208

08003700 <memset>:
 8003700:	4402      	add	r2, r0
 8003702:	4603      	mov	r3, r0
 8003704:	4293      	cmp	r3, r2
 8003706:	d100      	bne.n	800370a <memset+0xa>
 8003708:	4770      	bx	lr
 800370a:	f803 1b01 	strb.w	r1, [r3], #1
 800370e:	e7f9      	b.n	8003704 <memset+0x4>

08003710 <__errno>:
 8003710:	4b01      	ldr	r3, [pc, #4]	@ (8003718 <__errno+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000024 	.word	0x20000024

0800371c <__libc_init_array>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	4d0d      	ldr	r5, [pc, #52]	@ (8003754 <__libc_init_array+0x38>)
 8003720:	4c0d      	ldr	r4, [pc, #52]	@ (8003758 <__libc_init_array+0x3c>)
 8003722:	1b64      	subs	r4, r4, r5
 8003724:	10a4      	asrs	r4, r4, #2
 8003726:	2600      	movs	r6, #0
 8003728:	42a6      	cmp	r6, r4
 800372a:	d109      	bne.n	8003740 <__libc_init_array+0x24>
 800372c:	4d0b      	ldr	r5, [pc, #44]	@ (800375c <__libc_init_array+0x40>)
 800372e:	4c0c      	ldr	r4, [pc, #48]	@ (8003760 <__libc_init_array+0x44>)
 8003730:	f000 fc64 	bl	8003ffc <_init>
 8003734:	1b64      	subs	r4, r4, r5
 8003736:	10a4      	asrs	r4, r4, #2
 8003738:	2600      	movs	r6, #0
 800373a:	42a6      	cmp	r6, r4
 800373c:	d105      	bne.n	800374a <__libc_init_array+0x2e>
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	f855 3b04 	ldr.w	r3, [r5], #4
 8003744:	4798      	blx	r3
 8003746:	3601      	adds	r6, #1
 8003748:	e7ee      	b.n	8003728 <__libc_init_array+0xc>
 800374a:	f855 3b04 	ldr.w	r3, [r5], #4
 800374e:	4798      	blx	r3
 8003750:	3601      	adds	r6, #1
 8003752:	e7f2      	b.n	800373a <__libc_init_array+0x1e>
 8003754:	08004098 	.word	0x08004098
 8003758:	08004098 	.word	0x08004098
 800375c:	08004098 	.word	0x08004098
 8003760:	0800409c 	.word	0x0800409c

08003764 <__retarget_lock_acquire_recursive>:
 8003764:	4770      	bx	lr

08003766 <__retarget_lock_release_recursive>:
 8003766:	4770      	bx	lr

08003768 <_free_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	4605      	mov	r5, r0
 800376c:	2900      	cmp	r1, #0
 800376e:	d041      	beq.n	80037f4 <_free_r+0x8c>
 8003770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003774:	1f0c      	subs	r4, r1, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	bfb8      	it	lt
 800377a:	18e4      	addlt	r4, r4, r3
 800377c:	f000 f8e0 	bl	8003940 <__malloc_lock>
 8003780:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <_free_r+0x90>)
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	b933      	cbnz	r3, 8003794 <_free_r+0x2c>
 8003786:	6063      	str	r3, [r4, #4]
 8003788:	6014      	str	r4, [r2, #0]
 800378a:	4628      	mov	r0, r5
 800378c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003790:	f000 b8dc 	b.w	800394c <__malloc_unlock>
 8003794:	42a3      	cmp	r3, r4
 8003796:	d908      	bls.n	80037aa <_free_r+0x42>
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	1821      	adds	r1, r4, r0
 800379c:	428b      	cmp	r3, r1
 800379e:	bf01      	itttt	eq
 80037a0:	6819      	ldreq	r1, [r3, #0]
 80037a2:	685b      	ldreq	r3, [r3, #4]
 80037a4:	1809      	addeq	r1, r1, r0
 80037a6:	6021      	streq	r1, [r4, #0]
 80037a8:	e7ed      	b.n	8003786 <_free_r+0x1e>
 80037aa:	461a      	mov	r2, r3
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b10b      	cbz	r3, 80037b4 <_free_r+0x4c>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d9fa      	bls.n	80037aa <_free_r+0x42>
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	1850      	adds	r0, r2, r1
 80037b8:	42a0      	cmp	r0, r4
 80037ba:	d10b      	bne.n	80037d4 <_free_r+0x6c>
 80037bc:	6820      	ldr	r0, [r4, #0]
 80037be:	4401      	add	r1, r0
 80037c0:	1850      	adds	r0, r2, r1
 80037c2:	4283      	cmp	r3, r0
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	d1e0      	bne.n	800378a <_free_r+0x22>
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	6053      	str	r3, [r2, #4]
 80037ce:	4408      	add	r0, r1
 80037d0:	6010      	str	r0, [r2, #0]
 80037d2:	e7da      	b.n	800378a <_free_r+0x22>
 80037d4:	d902      	bls.n	80037dc <_free_r+0x74>
 80037d6:	230c      	movs	r3, #12
 80037d8:	602b      	str	r3, [r5, #0]
 80037da:	e7d6      	b.n	800378a <_free_r+0x22>
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	1821      	adds	r1, r4, r0
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf04      	itt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	6063      	str	r3, [r4, #4]
 80037ea:	bf04      	itt	eq
 80037ec:	1809      	addeq	r1, r1, r0
 80037ee:	6021      	streq	r1, [r4, #0]
 80037f0:	6054      	str	r4, [r2, #4]
 80037f2:	e7ca      	b.n	800378a <_free_r+0x22>
 80037f4:	bd38      	pop	{r3, r4, r5, pc}
 80037f6:	bf00      	nop
 80037f8:	2000036c 	.word	0x2000036c

080037fc <sbrk_aligned>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4e0f      	ldr	r6, [pc, #60]	@ (800383c <sbrk_aligned+0x40>)
 8003800:	460c      	mov	r4, r1
 8003802:	6831      	ldr	r1, [r6, #0]
 8003804:	4605      	mov	r5, r0
 8003806:	b911      	cbnz	r1, 800380e <sbrk_aligned+0x12>
 8003808:	f000 fba4 	bl	8003f54 <_sbrk_r>
 800380c:	6030      	str	r0, [r6, #0]
 800380e:	4621      	mov	r1, r4
 8003810:	4628      	mov	r0, r5
 8003812:	f000 fb9f 	bl	8003f54 <_sbrk_r>
 8003816:	1c43      	adds	r3, r0, #1
 8003818:	d103      	bne.n	8003822 <sbrk_aligned+0x26>
 800381a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800381e:	4620      	mov	r0, r4
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	1cc4      	adds	r4, r0, #3
 8003824:	f024 0403 	bic.w	r4, r4, #3
 8003828:	42a0      	cmp	r0, r4
 800382a:	d0f8      	beq.n	800381e <sbrk_aligned+0x22>
 800382c:	1a21      	subs	r1, r4, r0
 800382e:	4628      	mov	r0, r5
 8003830:	f000 fb90 	bl	8003f54 <_sbrk_r>
 8003834:	3001      	adds	r0, #1
 8003836:	d1f2      	bne.n	800381e <sbrk_aligned+0x22>
 8003838:	e7ef      	b.n	800381a <sbrk_aligned+0x1e>
 800383a:	bf00      	nop
 800383c:	20000368 	.word	0x20000368

08003840 <_malloc_r>:
 8003840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003844:	1ccd      	adds	r5, r1, #3
 8003846:	f025 0503 	bic.w	r5, r5, #3
 800384a:	3508      	adds	r5, #8
 800384c:	2d0c      	cmp	r5, #12
 800384e:	bf38      	it	cc
 8003850:	250c      	movcc	r5, #12
 8003852:	2d00      	cmp	r5, #0
 8003854:	4606      	mov	r6, r0
 8003856:	db01      	blt.n	800385c <_malloc_r+0x1c>
 8003858:	42a9      	cmp	r1, r5
 800385a:	d904      	bls.n	8003866 <_malloc_r+0x26>
 800385c:	230c      	movs	r3, #12
 800385e:	6033      	str	r3, [r6, #0]
 8003860:	2000      	movs	r0, #0
 8003862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800393c <_malloc_r+0xfc>
 800386a:	f000 f869 	bl	8003940 <__malloc_lock>
 800386e:	f8d8 3000 	ldr.w	r3, [r8]
 8003872:	461c      	mov	r4, r3
 8003874:	bb44      	cbnz	r4, 80038c8 <_malloc_r+0x88>
 8003876:	4629      	mov	r1, r5
 8003878:	4630      	mov	r0, r6
 800387a:	f7ff ffbf 	bl	80037fc <sbrk_aligned>
 800387e:	1c43      	adds	r3, r0, #1
 8003880:	4604      	mov	r4, r0
 8003882:	d158      	bne.n	8003936 <_malloc_r+0xf6>
 8003884:	f8d8 4000 	ldr.w	r4, [r8]
 8003888:	4627      	mov	r7, r4
 800388a:	2f00      	cmp	r7, #0
 800388c:	d143      	bne.n	8003916 <_malloc_r+0xd6>
 800388e:	2c00      	cmp	r4, #0
 8003890:	d04b      	beq.n	800392a <_malloc_r+0xea>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	4639      	mov	r1, r7
 8003896:	4630      	mov	r0, r6
 8003898:	eb04 0903 	add.w	r9, r4, r3
 800389c:	f000 fb5a 	bl	8003f54 <_sbrk_r>
 80038a0:	4581      	cmp	r9, r0
 80038a2:	d142      	bne.n	800392a <_malloc_r+0xea>
 80038a4:	6821      	ldr	r1, [r4, #0]
 80038a6:	1a6d      	subs	r5, r5, r1
 80038a8:	4629      	mov	r1, r5
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff ffa6 	bl	80037fc <sbrk_aligned>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d03a      	beq.n	800392a <_malloc_r+0xea>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	442b      	add	r3, r5
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	f8d8 3000 	ldr.w	r3, [r8]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	bb62      	cbnz	r2, 800391c <_malloc_r+0xdc>
 80038c2:	f8c8 7000 	str.w	r7, [r8]
 80038c6:	e00f      	b.n	80038e8 <_malloc_r+0xa8>
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	1b52      	subs	r2, r2, r5
 80038cc:	d420      	bmi.n	8003910 <_malloc_r+0xd0>
 80038ce:	2a0b      	cmp	r2, #11
 80038d0:	d917      	bls.n	8003902 <_malloc_r+0xc2>
 80038d2:	1961      	adds	r1, r4, r5
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	6025      	str	r5, [r4, #0]
 80038d8:	bf18      	it	ne
 80038da:	6059      	strne	r1, [r3, #4]
 80038dc:	6863      	ldr	r3, [r4, #4]
 80038de:	bf08      	it	eq
 80038e0:	f8c8 1000 	streq.w	r1, [r8]
 80038e4:	5162      	str	r2, [r4, r5]
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	4630      	mov	r0, r6
 80038ea:	f000 f82f 	bl	800394c <__malloc_unlock>
 80038ee:	f104 000b 	add.w	r0, r4, #11
 80038f2:	1d23      	adds	r3, r4, #4
 80038f4:	f020 0007 	bic.w	r0, r0, #7
 80038f8:	1ac2      	subs	r2, r0, r3
 80038fa:	bf1c      	itt	ne
 80038fc:	1a1b      	subne	r3, r3, r0
 80038fe:	50a3      	strne	r3, [r4, r2]
 8003900:	e7af      	b.n	8003862 <_malloc_r+0x22>
 8003902:	6862      	ldr	r2, [r4, #4]
 8003904:	42a3      	cmp	r3, r4
 8003906:	bf0c      	ite	eq
 8003908:	f8c8 2000 	streq.w	r2, [r8]
 800390c:	605a      	strne	r2, [r3, #4]
 800390e:	e7eb      	b.n	80038e8 <_malloc_r+0xa8>
 8003910:	4623      	mov	r3, r4
 8003912:	6864      	ldr	r4, [r4, #4]
 8003914:	e7ae      	b.n	8003874 <_malloc_r+0x34>
 8003916:	463c      	mov	r4, r7
 8003918:	687f      	ldr	r7, [r7, #4]
 800391a:	e7b6      	b.n	800388a <_malloc_r+0x4a>
 800391c:	461a      	mov	r2, r3
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	42a3      	cmp	r3, r4
 8003922:	d1fb      	bne.n	800391c <_malloc_r+0xdc>
 8003924:	2300      	movs	r3, #0
 8003926:	6053      	str	r3, [r2, #4]
 8003928:	e7de      	b.n	80038e8 <_malloc_r+0xa8>
 800392a:	230c      	movs	r3, #12
 800392c:	6033      	str	r3, [r6, #0]
 800392e:	4630      	mov	r0, r6
 8003930:	f000 f80c 	bl	800394c <__malloc_unlock>
 8003934:	e794      	b.n	8003860 <_malloc_r+0x20>
 8003936:	6005      	str	r5, [r0, #0]
 8003938:	e7d6      	b.n	80038e8 <_malloc_r+0xa8>
 800393a:	bf00      	nop
 800393c:	2000036c 	.word	0x2000036c

08003940 <__malloc_lock>:
 8003940:	4801      	ldr	r0, [pc, #4]	@ (8003948 <__malloc_lock+0x8>)
 8003942:	f7ff bf0f 	b.w	8003764 <__retarget_lock_acquire_recursive>
 8003946:	bf00      	nop
 8003948:	20000364 	.word	0x20000364

0800394c <__malloc_unlock>:
 800394c:	4801      	ldr	r0, [pc, #4]	@ (8003954 <__malloc_unlock+0x8>)
 800394e:	f7ff bf0a 	b.w	8003766 <__retarget_lock_release_recursive>
 8003952:	bf00      	nop
 8003954:	20000364 	.word	0x20000364

08003958 <__ssputs_r>:
 8003958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	688e      	ldr	r6, [r1, #8]
 800395e:	461f      	mov	r7, r3
 8003960:	42be      	cmp	r6, r7
 8003962:	680b      	ldr	r3, [r1, #0]
 8003964:	4682      	mov	sl, r0
 8003966:	460c      	mov	r4, r1
 8003968:	4690      	mov	r8, r2
 800396a:	d82d      	bhi.n	80039c8 <__ssputs_r+0x70>
 800396c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003970:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003974:	d026      	beq.n	80039c4 <__ssputs_r+0x6c>
 8003976:	6965      	ldr	r5, [r4, #20]
 8003978:	6909      	ldr	r1, [r1, #16]
 800397a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800397e:	eba3 0901 	sub.w	r9, r3, r1
 8003982:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003986:	1c7b      	adds	r3, r7, #1
 8003988:	444b      	add	r3, r9
 800398a:	106d      	asrs	r5, r5, #1
 800398c:	429d      	cmp	r5, r3
 800398e:	bf38      	it	cc
 8003990:	461d      	movcc	r5, r3
 8003992:	0553      	lsls	r3, r2, #21
 8003994:	d527      	bpl.n	80039e6 <__ssputs_r+0x8e>
 8003996:	4629      	mov	r1, r5
 8003998:	f7ff ff52 	bl	8003840 <_malloc_r>
 800399c:	4606      	mov	r6, r0
 800399e:	b360      	cbz	r0, 80039fa <__ssputs_r+0xa2>
 80039a0:	6921      	ldr	r1, [r4, #16]
 80039a2:	464a      	mov	r2, r9
 80039a4:	f000 fae6 	bl	8003f74 <memcpy>
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b2:	81a3      	strh	r3, [r4, #12]
 80039b4:	6126      	str	r6, [r4, #16]
 80039b6:	6165      	str	r5, [r4, #20]
 80039b8:	444e      	add	r6, r9
 80039ba:	eba5 0509 	sub.w	r5, r5, r9
 80039be:	6026      	str	r6, [r4, #0]
 80039c0:	60a5      	str	r5, [r4, #8]
 80039c2:	463e      	mov	r6, r7
 80039c4:	42be      	cmp	r6, r7
 80039c6:	d900      	bls.n	80039ca <__ssputs_r+0x72>
 80039c8:	463e      	mov	r6, r7
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	4632      	mov	r2, r6
 80039ce:	4641      	mov	r1, r8
 80039d0:	f000 faa6 	bl	8003f20 <memmove>
 80039d4:	68a3      	ldr	r3, [r4, #8]
 80039d6:	1b9b      	subs	r3, r3, r6
 80039d8:	60a3      	str	r3, [r4, #8]
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	4433      	add	r3, r6
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	2000      	movs	r0, #0
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e6:	462a      	mov	r2, r5
 80039e8:	f000 fad2 	bl	8003f90 <_realloc_r>
 80039ec:	4606      	mov	r6, r0
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d1e0      	bne.n	80039b4 <__ssputs_r+0x5c>
 80039f2:	6921      	ldr	r1, [r4, #16]
 80039f4:	4650      	mov	r0, sl
 80039f6:	f7ff feb7 	bl	8003768 <_free_r>
 80039fa:	230c      	movs	r3, #12
 80039fc:	f8ca 3000 	str.w	r3, [sl]
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a0c:	e7e9      	b.n	80039e2 <__ssputs_r+0x8a>
	...

08003a10 <_svfiprintf_r>:
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	4698      	mov	r8, r3
 8003a16:	898b      	ldrh	r3, [r1, #12]
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	b09d      	sub	sp, #116	@ 0x74
 8003a1c:	4607      	mov	r7, r0
 8003a1e:	460d      	mov	r5, r1
 8003a20:	4614      	mov	r4, r2
 8003a22:	d510      	bpl.n	8003a46 <_svfiprintf_r+0x36>
 8003a24:	690b      	ldr	r3, [r1, #16]
 8003a26:	b973      	cbnz	r3, 8003a46 <_svfiprintf_r+0x36>
 8003a28:	2140      	movs	r1, #64	@ 0x40
 8003a2a:	f7ff ff09 	bl	8003840 <_malloc_r>
 8003a2e:	6028      	str	r0, [r5, #0]
 8003a30:	6128      	str	r0, [r5, #16]
 8003a32:	b930      	cbnz	r0, 8003a42 <_svfiprintf_r+0x32>
 8003a34:	230c      	movs	r3, #12
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a3c:	b01d      	add	sp, #116	@ 0x74
 8003a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a42:	2340      	movs	r3, #64	@ 0x40
 8003a44:	616b      	str	r3, [r5, #20]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a54:	2330      	movs	r3, #48	@ 0x30
 8003a56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bf4 <_svfiprintf_r+0x1e4>
 8003a5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a5e:	f04f 0901 	mov.w	r9, #1
 8003a62:	4623      	mov	r3, r4
 8003a64:	469a      	mov	sl, r3
 8003a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a6a:	b10a      	cbz	r2, 8003a70 <_svfiprintf_r+0x60>
 8003a6c:	2a25      	cmp	r2, #37	@ 0x25
 8003a6e:	d1f9      	bne.n	8003a64 <_svfiprintf_r+0x54>
 8003a70:	ebba 0b04 	subs.w	fp, sl, r4
 8003a74:	d00b      	beq.n	8003a8e <_svfiprintf_r+0x7e>
 8003a76:	465b      	mov	r3, fp
 8003a78:	4622      	mov	r2, r4
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	f7ff ff6b 	bl	8003958 <__ssputs_r>
 8003a82:	3001      	adds	r0, #1
 8003a84:	f000 80a7 	beq.w	8003bd6 <_svfiprintf_r+0x1c6>
 8003a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a8a:	445a      	add	r2, fp
 8003a8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 809f 	beq.w	8003bd6 <_svfiprintf_r+0x1c6>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aa2:	f10a 0a01 	add.w	sl, sl, #1
 8003aa6:	9304      	str	r3, [sp, #16]
 8003aa8:	9307      	str	r3, [sp, #28]
 8003aaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003aae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ab0:	4654      	mov	r4, sl
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab8:	484e      	ldr	r0, [pc, #312]	@ (8003bf4 <_svfiprintf_r+0x1e4>)
 8003aba:	f7fc fb99 	bl	80001f0 <memchr>
 8003abe:	9a04      	ldr	r2, [sp, #16]
 8003ac0:	b9d8      	cbnz	r0, 8003afa <_svfiprintf_r+0xea>
 8003ac2:	06d0      	lsls	r0, r2, #27
 8003ac4:	bf44      	itt	mi
 8003ac6:	2320      	movmi	r3, #32
 8003ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003acc:	0711      	lsls	r1, r2, #28
 8003ace:	bf44      	itt	mi
 8003ad0:	232b      	movmi	r3, #43	@ 0x2b
 8003ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8003ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8003adc:	d015      	beq.n	8003b0a <_svfiprintf_r+0xfa>
 8003ade:	9a07      	ldr	r2, [sp, #28]
 8003ae0:	4654      	mov	r4, sl
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f04f 0c0a 	mov.w	ip, #10
 8003ae8:	4621      	mov	r1, r4
 8003aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aee:	3b30      	subs	r3, #48	@ 0x30
 8003af0:	2b09      	cmp	r3, #9
 8003af2:	d94b      	bls.n	8003b8c <_svfiprintf_r+0x17c>
 8003af4:	b1b0      	cbz	r0, 8003b24 <_svfiprintf_r+0x114>
 8003af6:	9207      	str	r2, [sp, #28]
 8003af8:	e014      	b.n	8003b24 <_svfiprintf_r+0x114>
 8003afa:	eba0 0308 	sub.w	r3, r0, r8
 8003afe:	fa09 f303 	lsl.w	r3, r9, r3
 8003b02:	4313      	orrs	r3, r2
 8003b04:	9304      	str	r3, [sp, #16]
 8003b06:	46a2      	mov	sl, r4
 8003b08:	e7d2      	b.n	8003ab0 <_svfiprintf_r+0xa0>
 8003b0a:	9b03      	ldr	r3, [sp, #12]
 8003b0c:	1d19      	adds	r1, r3, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	9103      	str	r1, [sp, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bfbb      	ittet	lt
 8003b16:	425b      	neglt	r3, r3
 8003b18:	f042 0202 	orrlt.w	r2, r2, #2
 8003b1c:	9307      	strge	r3, [sp, #28]
 8003b1e:	9307      	strlt	r3, [sp, #28]
 8003b20:	bfb8      	it	lt
 8003b22:	9204      	strlt	r2, [sp, #16]
 8003b24:	7823      	ldrb	r3, [r4, #0]
 8003b26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b28:	d10a      	bne.n	8003b40 <_svfiprintf_r+0x130>
 8003b2a:	7863      	ldrb	r3, [r4, #1]
 8003b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b2e:	d132      	bne.n	8003b96 <_svfiprintf_r+0x186>
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	1d1a      	adds	r2, r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	9203      	str	r2, [sp, #12]
 8003b38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b3c:	3402      	adds	r4, #2
 8003b3e:	9305      	str	r3, [sp, #20]
 8003b40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c04 <_svfiprintf_r+0x1f4>
 8003b44:	7821      	ldrb	r1, [r4, #0]
 8003b46:	2203      	movs	r2, #3
 8003b48:	4650      	mov	r0, sl
 8003b4a:	f7fc fb51 	bl	80001f0 <memchr>
 8003b4e:	b138      	cbz	r0, 8003b60 <_svfiprintf_r+0x150>
 8003b50:	9b04      	ldr	r3, [sp, #16]
 8003b52:	eba0 000a 	sub.w	r0, r0, sl
 8003b56:	2240      	movs	r2, #64	@ 0x40
 8003b58:	4082      	lsls	r2, r0
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	3401      	adds	r4, #1
 8003b5e:	9304      	str	r3, [sp, #16]
 8003b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b64:	4824      	ldr	r0, [pc, #144]	@ (8003bf8 <_svfiprintf_r+0x1e8>)
 8003b66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b6a:	2206      	movs	r2, #6
 8003b6c:	f7fc fb40 	bl	80001f0 <memchr>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d036      	beq.n	8003be2 <_svfiprintf_r+0x1d2>
 8003b74:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <_svfiprintf_r+0x1ec>)
 8003b76:	bb1b      	cbnz	r3, 8003bc0 <_svfiprintf_r+0x1b0>
 8003b78:	9b03      	ldr	r3, [sp, #12]
 8003b7a:	3307      	adds	r3, #7
 8003b7c:	f023 0307 	bic.w	r3, r3, #7
 8003b80:	3308      	adds	r3, #8
 8003b82:	9303      	str	r3, [sp, #12]
 8003b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b86:	4433      	add	r3, r6
 8003b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b8a:	e76a      	b.n	8003a62 <_svfiprintf_r+0x52>
 8003b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b90:	460c      	mov	r4, r1
 8003b92:	2001      	movs	r0, #1
 8003b94:	e7a8      	b.n	8003ae8 <_svfiprintf_r+0xd8>
 8003b96:	2300      	movs	r3, #0
 8003b98:	3401      	adds	r4, #1
 8003b9a:	9305      	str	r3, [sp, #20]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f04f 0c0a 	mov.w	ip, #10
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ba8:	3a30      	subs	r2, #48	@ 0x30
 8003baa:	2a09      	cmp	r2, #9
 8003bac:	d903      	bls.n	8003bb6 <_svfiprintf_r+0x1a6>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0c6      	beq.n	8003b40 <_svfiprintf_r+0x130>
 8003bb2:	9105      	str	r1, [sp, #20]
 8003bb4:	e7c4      	b.n	8003b40 <_svfiprintf_r+0x130>
 8003bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bba:	4604      	mov	r4, r0
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e7f0      	b.n	8003ba2 <_svfiprintf_r+0x192>
 8003bc0:	ab03      	add	r3, sp, #12
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	462a      	mov	r2, r5
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <_svfiprintf_r+0x1f0>)
 8003bc8:	a904      	add	r1, sp, #16
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	1c42      	adds	r2, r0, #1
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	d1d6      	bne.n	8003b84 <_svfiprintf_r+0x174>
 8003bd6:	89ab      	ldrh	r3, [r5, #12]
 8003bd8:	065b      	lsls	r3, r3, #25
 8003bda:	f53f af2d 	bmi.w	8003a38 <_svfiprintf_r+0x28>
 8003bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003be0:	e72c      	b.n	8003a3c <_svfiprintf_r+0x2c>
 8003be2:	ab03      	add	r3, sp, #12
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462a      	mov	r2, r5
 8003be8:	4b05      	ldr	r3, [pc, #20]	@ (8003c00 <_svfiprintf_r+0x1f0>)
 8003bea:	a904      	add	r1, sp, #16
 8003bec:	4638      	mov	r0, r7
 8003bee:	f000 f879 	bl	8003ce4 <_printf_i>
 8003bf2:	e7ed      	b.n	8003bd0 <_svfiprintf_r+0x1c0>
 8003bf4:	0800405c 	.word	0x0800405c
 8003bf8:	08004066 	.word	0x08004066
 8003bfc:	00000000 	.word	0x00000000
 8003c00:	08003959 	.word	0x08003959
 8003c04:	08004062 	.word	0x08004062

08003c08 <_printf_common>:
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	4616      	mov	r6, r2
 8003c0e:	4698      	mov	r8, r3
 8003c10:	688a      	ldr	r2, [r1, #8]
 8003c12:	690b      	ldr	r3, [r1, #16]
 8003c14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfb8      	it	lt
 8003c1c:	4613      	movlt	r3, r2
 8003c1e:	6033      	str	r3, [r6, #0]
 8003c20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c24:	4607      	mov	r7, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	b10a      	cbz	r2, 8003c2e <_printf_common+0x26>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	0699      	lsls	r1, r3, #26
 8003c32:	bf42      	ittt	mi
 8003c34:	6833      	ldrmi	r3, [r6, #0]
 8003c36:	3302      	addmi	r3, #2
 8003c38:	6033      	strmi	r3, [r6, #0]
 8003c3a:	6825      	ldr	r5, [r4, #0]
 8003c3c:	f015 0506 	ands.w	r5, r5, #6
 8003c40:	d106      	bne.n	8003c50 <_printf_common+0x48>
 8003c42:	f104 0a19 	add.w	sl, r4, #25
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	6832      	ldr	r2, [r6, #0]
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	dc26      	bgt.n	8003c9e <_printf_common+0x96>
 8003c50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c54:	6822      	ldr	r2, [r4, #0]
 8003c56:	3b00      	subs	r3, #0
 8003c58:	bf18      	it	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d42b      	bmi.n	8003cb8 <_printf_common+0xb0>
 8003c60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c64:	4641      	mov	r1, r8
 8003c66:	4638      	mov	r0, r7
 8003c68:	47c8      	blx	r9
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d01e      	beq.n	8003cac <_printf_common+0xa4>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf02      	ittt	eq
 8003c7a:	68e5      	ldreq	r5, [r4, #12]
 8003c7c:	6833      	ldreq	r3, [r6, #0]
 8003c7e:	1aed      	subeq	r5, r5, r3
 8003c80:	68a3      	ldr	r3, [r4, #8]
 8003c82:	bf0c      	ite	eq
 8003c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c88:	2500      	movne	r5, #0
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	bfc4      	itt	gt
 8003c8e:	1a9b      	subgt	r3, r3, r2
 8003c90:	18ed      	addgt	r5, r5, r3
 8003c92:	2600      	movs	r6, #0
 8003c94:	341a      	adds	r4, #26
 8003c96:	42b5      	cmp	r5, r6
 8003c98:	d11a      	bne.n	8003cd0 <_printf_common+0xc8>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e008      	b.n	8003cb0 <_printf_common+0xa8>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4652      	mov	r2, sl
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	47c8      	blx	r9
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d103      	bne.n	8003cb4 <_printf_common+0xac>
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	e7c6      	b.n	8003c46 <_printf_common+0x3e>
 8003cb8:	18e1      	adds	r1, r4, r3
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	2030      	movs	r0, #48	@ 0x30
 8003cbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cc2:	4422      	add	r2, r4
 8003cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ccc:	3302      	adds	r3, #2
 8003cce:	e7c7      	b.n	8003c60 <_printf_common+0x58>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	47c8      	blx	r9
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d0e6      	beq.n	8003cac <_printf_common+0xa4>
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7d9      	b.n	8003c96 <_printf_common+0x8e>
	...

08003ce4 <_printf_i>:
 8003ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	7e0f      	ldrb	r7, [r1, #24]
 8003cea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cec:	2f78      	cmp	r7, #120	@ 0x78
 8003cee:	4691      	mov	r9, r2
 8003cf0:	4680      	mov	r8, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	469a      	mov	sl, r3
 8003cf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cfa:	d807      	bhi.n	8003d0c <_printf_i+0x28>
 8003cfc:	2f62      	cmp	r7, #98	@ 0x62
 8003cfe:	d80a      	bhi.n	8003d16 <_printf_i+0x32>
 8003d00:	2f00      	cmp	r7, #0
 8003d02:	f000 80d1 	beq.w	8003ea8 <_printf_i+0x1c4>
 8003d06:	2f58      	cmp	r7, #88	@ 0x58
 8003d08:	f000 80b8 	beq.w	8003e7c <_printf_i+0x198>
 8003d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d14:	e03a      	b.n	8003d8c <_printf_i+0xa8>
 8003d16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d1a:	2b15      	cmp	r3, #21
 8003d1c:	d8f6      	bhi.n	8003d0c <_printf_i+0x28>
 8003d1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003d24 <_printf_i+0x40>)
 8003d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d24:	08003d7d 	.word	0x08003d7d
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d0d 	.word	0x08003d0d
 8003d30:	08003d0d 	.word	0x08003d0d
 8003d34:	08003d0d 	.word	0x08003d0d
 8003d38:	08003d0d 	.word	0x08003d0d
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003d0d 	.word	0x08003d0d
 8003d44:	08003d0d 	.word	0x08003d0d
 8003d48:	08003d0d 	.word	0x08003d0d
 8003d4c:	08003d0d 	.word	0x08003d0d
 8003d50:	08003e8f 	.word	0x08003e8f
 8003d54:	08003dbb 	.word	0x08003dbb
 8003d58:	08003e49 	.word	0x08003e49
 8003d5c:	08003d0d 	.word	0x08003d0d
 8003d60:	08003d0d 	.word	0x08003d0d
 8003d64:	08003eb1 	.word	0x08003eb1
 8003d68:	08003d0d 	.word	0x08003d0d
 8003d6c:	08003dbb 	.word	0x08003dbb
 8003d70:	08003d0d 	.word	0x08003d0d
 8003d74:	08003d0d 	.word	0x08003d0d
 8003d78:	08003e51 	.word	0x08003e51
 8003d7c:	6833      	ldr	r3, [r6, #0]
 8003d7e:	1d1a      	adds	r2, r3, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6032      	str	r2, [r6, #0]
 8003d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e09c      	b.n	8003eca <_printf_i+0x1e6>
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	6820      	ldr	r0, [r4, #0]
 8003d94:	1d19      	adds	r1, r3, #4
 8003d96:	6031      	str	r1, [r6, #0]
 8003d98:	0606      	lsls	r6, r0, #24
 8003d9a:	d501      	bpl.n	8003da0 <_printf_i+0xbc>
 8003d9c:	681d      	ldr	r5, [r3, #0]
 8003d9e:	e003      	b.n	8003da8 <_printf_i+0xc4>
 8003da0:	0645      	lsls	r5, r0, #25
 8003da2:	d5fb      	bpl.n	8003d9c <_printf_i+0xb8>
 8003da4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	da03      	bge.n	8003db4 <_printf_i+0xd0>
 8003dac:	232d      	movs	r3, #45	@ 0x2d
 8003dae:	426d      	negs	r5, r5
 8003db0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db4:	4858      	ldr	r0, [pc, #352]	@ (8003f18 <_printf_i+0x234>)
 8003db6:	230a      	movs	r3, #10
 8003db8:	e011      	b.n	8003dde <_printf_i+0xfa>
 8003dba:	6821      	ldr	r1, [r4, #0]
 8003dbc:	6833      	ldr	r3, [r6, #0]
 8003dbe:	0608      	lsls	r0, r1, #24
 8003dc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dc4:	d402      	bmi.n	8003dcc <_printf_i+0xe8>
 8003dc6:	0649      	lsls	r1, r1, #25
 8003dc8:	bf48      	it	mi
 8003dca:	b2ad      	uxthmi	r5, r5
 8003dcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dce:	4852      	ldr	r0, [pc, #328]	@ (8003f18 <_printf_i+0x234>)
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	bf14      	ite	ne
 8003dd4:	230a      	movne	r3, #10
 8003dd6:	2308      	moveq	r3, #8
 8003dd8:	2100      	movs	r1, #0
 8003dda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dde:	6866      	ldr	r6, [r4, #4]
 8003de0:	60a6      	str	r6, [r4, #8]
 8003de2:	2e00      	cmp	r6, #0
 8003de4:	db05      	blt.n	8003df2 <_printf_i+0x10e>
 8003de6:	6821      	ldr	r1, [r4, #0]
 8003de8:	432e      	orrs	r6, r5
 8003dea:	f021 0104 	bic.w	r1, r1, #4
 8003dee:	6021      	str	r1, [r4, #0]
 8003df0:	d04b      	beq.n	8003e8a <_printf_i+0x1a6>
 8003df2:	4616      	mov	r6, r2
 8003df4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003df8:	fb03 5711 	mls	r7, r3, r1, r5
 8003dfc:	5dc7      	ldrb	r7, [r0, r7]
 8003dfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e02:	462f      	mov	r7, r5
 8003e04:	42bb      	cmp	r3, r7
 8003e06:	460d      	mov	r5, r1
 8003e08:	d9f4      	bls.n	8003df4 <_printf_i+0x110>
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d10b      	bne.n	8003e26 <_printf_i+0x142>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	07df      	lsls	r7, r3, #31
 8003e12:	d508      	bpl.n	8003e26 <_printf_i+0x142>
 8003e14:	6923      	ldr	r3, [r4, #16]
 8003e16:	6861      	ldr	r1, [r4, #4]
 8003e18:	4299      	cmp	r1, r3
 8003e1a:	bfde      	ittt	le
 8003e1c:	2330      	movle	r3, #48	@ 0x30
 8003e1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e22:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003e26:	1b92      	subs	r2, r2, r6
 8003e28:	6122      	str	r2, [r4, #16]
 8003e2a:	f8cd a000 	str.w	sl, [sp]
 8003e2e:	464b      	mov	r3, r9
 8003e30:	aa03      	add	r2, sp, #12
 8003e32:	4621      	mov	r1, r4
 8003e34:	4640      	mov	r0, r8
 8003e36:	f7ff fee7 	bl	8003c08 <_printf_common>
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d14a      	bne.n	8003ed4 <_printf_i+0x1f0>
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e42:	b004      	add	sp, #16
 8003e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	f043 0320 	orr.w	r3, r3, #32
 8003e4e:	6023      	str	r3, [r4, #0]
 8003e50:	4832      	ldr	r0, [pc, #200]	@ (8003f1c <_printf_i+0x238>)
 8003e52:	2778      	movs	r7, #120	@ 0x78
 8003e54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	6831      	ldr	r1, [r6, #0]
 8003e5c:	061f      	lsls	r7, r3, #24
 8003e5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e62:	d402      	bmi.n	8003e6a <_printf_i+0x186>
 8003e64:	065f      	lsls	r7, r3, #25
 8003e66:	bf48      	it	mi
 8003e68:	b2ad      	uxthmi	r5, r5
 8003e6a:	6031      	str	r1, [r6, #0]
 8003e6c:	07d9      	lsls	r1, r3, #31
 8003e6e:	bf44      	itt	mi
 8003e70:	f043 0320 	orrmi.w	r3, r3, #32
 8003e74:	6023      	strmi	r3, [r4, #0]
 8003e76:	b11d      	cbz	r5, 8003e80 <_printf_i+0x19c>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	e7ad      	b.n	8003dd8 <_printf_i+0xf4>
 8003e7c:	4826      	ldr	r0, [pc, #152]	@ (8003f18 <_printf_i+0x234>)
 8003e7e:	e7e9      	b.n	8003e54 <_printf_i+0x170>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	f023 0320 	bic.w	r3, r3, #32
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	e7f6      	b.n	8003e78 <_printf_i+0x194>
 8003e8a:	4616      	mov	r6, r2
 8003e8c:	e7bd      	b.n	8003e0a <_printf_i+0x126>
 8003e8e:	6833      	ldr	r3, [r6, #0]
 8003e90:	6825      	ldr	r5, [r4, #0]
 8003e92:	6961      	ldr	r1, [r4, #20]
 8003e94:	1d18      	adds	r0, r3, #4
 8003e96:	6030      	str	r0, [r6, #0]
 8003e98:	062e      	lsls	r6, r5, #24
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	d501      	bpl.n	8003ea2 <_printf_i+0x1be>
 8003e9e:	6019      	str	r1, [r3, #0]
 8003ea0:	e002      	b.n	8003ea8 <_printf_i+0x1c4>
 8003ea2:	0668      	lsls	r0, r5, #25
 8003ea4:	d5fb      	bpl.n	8003e9e <_printf_i+0x1ba>
 8003ea6:	8019      	strh	r1, [r3, #0]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	6123      	str	r3, [r4, #16]
 8003eac:	4616      	mov	r6, r2
 8003eae:	e7bc      	b.n	8003e2a <_printf_i+0x146>
 8003eb0:	6833      	ldr	r3, [r6, #0]
 8003eb2:	1d1a      	adds	r2, r3, #4
 8003eb4:	6032      	str	r2, [r6, #0]
 8003eb6:	681e      	ldr	r6, [r3, #0]
 8003eb8:	6862      	ldr	r2, [r4, #4]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f7fc f997 	bl	80001f0 <memchr>
 8003ec2:	b108      	cbz	r0, 8003ec8 <_printf_i+0x1e4>
 8003ec4:	1b80      	subs	r0, r0, r6
 8003ec6:	6060      	str	r0, [r4, #4]
 8003ec8:	6863      	ldr	r3, [r4, #4]
 8003eca:	6123      	str	r3, [r4, #16]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ed2:	e7aa      	b.n	8003e2a <_printf_i+0x146>
 8003ed4:	6923      	ldr	r3, [r4, #16]
 8003ed6:	4632      	mov	r2, r6
 8003ed8:	4649      	mov	r1, r9
 8003eda:	4640      	mov	r0, r8
 8003edc:	47d0      	blx	sl
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d0ad      	beq.n	8003e3e <_printf_i+0x15a>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	079b      	lsls	r3, r3, #30
 8003ee6:	d413      	bmi.n	8003f10 <_printf_i+0x22c>
 8003ee8:	68e0      	ldr	r0, [r4, #12]
 8003eea:	9b03      	ldr	r3, [sp, #12]
 8003eec:	4298      	cmp	r0, r3
 8003eee:	bfb8      	it	lt
 8003ef0:	4618      	movlt	r0, r3
 8003ef2:	e7a6      	b.n	8003e42 <_printf_i+0x15e>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	4649      	mov	r1, r9
 8003efa:	4640      	mov	r0, r8
 8003efc:	47d0      	blx	sl
 8003efe:	3001      	adds	r0, #1
 8003f00:	d09d      	beq.n	8003e3e <_printf_i+0x15a>
 8003f02:	3501      	adds	r5, #1
 8003f04:	68e3      	ldr	r3, [r4, #12]
 8003f06:	9903      	ldr	r1, [sp, #12]
 8003f08:	1a5b      	subs	r3, r3, r1
 8003f0a:	42ab      	cmp	r3, r5
 8003f0c:	dcf2      	bgt.n	8003ef4 <_printf_i+0x210>
 8003f0e:	e7eb      	b.n	8003ee8 <_printf_i+0x204>
 8003f10:	2500      	movs	r5, #0
 8003f12:	f104 0619 	add.w	r6, r4, #25
 8003f16:	e7f5      	b.n	8003f04 <_printf_i+0x220>
 8003f18:	0800406d 	.word	0x0800406d
 8003f1c:	0800407e 	.word	0x0800407e

08003f20 <memmove>:
 8003f20:	4288      	cmp	r0, r1
 8003f22:	b510      	push	{r4, lr}
 8003f24:	eb01 0402 	add.w	r4, r1, r2
 8003f28:	d902      	bls.n	8003f30 <memmove+0x10>
 8003f2a:	4284      	cmp	r4, r0
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	d807      	bhi.n	8003f40 <memmove+0x20>
 8003f30:	1e43      	subs	r3, r0, #1
 8003f32:	42a1      	cmp	r1, r4
 8003f34:	d008      	beq.n	8003f48 <memmove+0x28>
 8003f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f3e:	e7f8      	b.n	8003f32 <memmove+0x12>
 8003f40:	4402      	add	r2, r0
 8003f42:	4601      	mov	r1, r0
 8003f44:	428a      	cmp	r2, r1
 8003f46:	d100      	bne.n	8003f4a <memmove+0x2a>
 8003f48:	bd10      	pop	{r4, pc}
 8003f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f52:	e7f7      	b.n	8003f44 <memmove+0x24>

08003f54 <_sbrk_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4d06      	ldr	r5, [pc, #24]	@ (8003f70 <_sbrk_r+0x1c>)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	602b      	str	r3, [r5, #0]
 8003f60:	f7fd f97e 	bl	8001260 <_sbrk>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d102      	bne.n	8003f6e <_sbrk_r+0x1a>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	b103      	cbz	r3, 8003f6e <_sbrk_r+0x1a>
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	20000360 	.word	0x20000360

08003f74 <memcpy>:
 8003f74:	440a      	add	r2, r1
 8003f76:	4291      	cmp	r1, r2
 8003f78:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003f7c:	d100      	bne.n	8003f80 <memcpy+0xc>
 8003f7e:	4770      	bx	lr
 8003f80:	b510      	push	{r4, lr}
 8003f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f8a:	4291      	cmp	r1, r2
 8003f8c:	d1f9      	bne.n	8003f82 <memcpy+0xe>
 8003f8e:	bd10      	pop	{r4, pc}

08003f90 <_realloc_r>:
 8003f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f94:	4607      	mov	r7, r0
 8003f96:	4614      	mov	r4, r2
 8003f98:	460d      	mov	r5, r1
 8003f9a:	b921      	cbnz	r1, 8003fa6 <_realloc_r+0x16>
 8003f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	f7ff bc4d 	b.w	8003840 <_malloc_r>
 8003fa6:	b92a      	cbnz	r2, 8003fb4 <_realloc_r+0x24>
 8003fa8:	f7ff fbde 	bl	8003768 <_free_r>
 8003fac:	4625      	mov	r5, r4
 8003fae:	4628      	mov	r0, r5
 8003fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb4:	f000 f81a 	bl	8003fec <_malloc_usable_size_r>
 8003fb8:	4284      	cmp	r4, r0
 8003fba:	4606      	mov	r6, r0
 8003fbc:	d802      	bhi.n	8003fc4 <_realloc_r+0x34>
 8003fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fc2:	d8f4      	bhi.n	8003fae <_realloc_r+0x1e>
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f7ff fc3a 	bl	8003840 <_malloc_r>
 8003fcc:	4680      	mov	r8, r0
 8003fce:	b908      	cbnz	r0, 8003fd4 <_realloc_r+0x44>
 8003fd0:	4645      	mov	r5, r8
 8003fd2:	e7ec      	b.n	8003fae <_realloc_r+0x1e>
 8003fd4:	42b4      	cmp	r4, r6
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	bf28      	it	cs
 8003fdc:	4632      	movcs	r2, r6
 8003fde:	f7ff ffc9 	bl	8003f74 <memcpy>
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f7ff fbbf 	bl	8003768 <_free_r>
 8003fea:	e7f1      	b.n	8003fd0 <_realloc_r+0x40>

08003fec <_malloc_usable_size_r>:
 8003fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff0:	1f18      	subs	r0, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bfbc      	itt	lt
 8003ff6:	580b      	ldrlt	r3, [r1, r0]
 8003ff8:	18c0      	addlt	r0, r0, r3
 8003ffa:	4770      	bx	lr

08003ffc <_init>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

08004008 <_fini>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr
